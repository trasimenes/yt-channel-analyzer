#!/usr/bin/env python3
"""
Script de correction manuelle des dates Pierre et Vacances
R√©cup√®re les vraies dates de publication depuis YouTube et les applique en base.
"""

import sqlite3
import re
import urllib.request
import urllib.parse
from datetime import datetime
import time
from yt_channel_analyzer.database import get_db_connection

def get_youtube_publish_date(video_id):
    """R√©cup√©rer la date de publication d'une vid√©o YouTube via scraping l√©ger"""
    try:
        url = f"https://www.youtube.com/watch?v={video_id}"
        req = urllib.request.Request(
            url,
            headers={
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
            }
        )
        
        with urllib.request.urlopen(req, timeout=15) as response:
            html = response.read().decode('utf-8')
        
        # Chercher diff√©rents patterns de date dans le HTML
        patterns = [
            r'"publishDate":"([^"]*)"',
            r'"datePublished":"([^"]*)"',
            r'datePublished":\s*"([^"]*)"'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, html)
            if match:
                iso_date = match.group(1)
                try:
                    # Convertir la date ISO en format SQLite
                    date_obj = datetime.fromisoformat(iso_date.replace('Z', '+00:00'))
                    return date_obj.strftime('%Y-%m-%d %H:%M:%S')
                except:
                    continue
        
        return None
        
    except Exception as e:
        print(f"Erreur pour {video_id}: {e}")
        return None

def fix_pierre_vacances_dates():
    """Corriger les dates de Pierre et Vacances"""
    
    print("üîß Correction des dates Pierre et Vacances")
    print("=" * 50)
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # R√©cup√©rer les vid√©os avec dates corrompues
    cursor.execute("""
    SELECT id, video_id, title, published_at
    FROM video 
    WHERE concurrent_id = 504 
    AND DATE(published_at) = '2025-07-30'
    ORDER BY id
    LIMIT 25
    """)
    
    videos = cursor.fetchall()
    print(f"üìä {len(videos)} vid√©os √† corriger")
    
    corrections = 0
    
    for i, (db_id, video_id, title, current_date) in enumerate(videos, 1):
        print(f"\nüé¨ [{i}/{len(videos)}] {title[:50]}...")
        print(f"   Video ID: {video_id}")
        print(f"   Date actuelle: {current_date}")
        
        # R√©cup√©rer la vraie date YouTube
        real_date = get_youtube_publish_date(video_id)
        
        if real_date:
            print(f"   ‚úÖ Vraie date: {real_date}")
            
            # Appliquer la correction en base
            cursor.execute("""
            UPDATE video 
            SET published_at = ?, 
                youtube_published_at = ?, 
                last_updated = CURRENT_TIMESTAMP
            WHERE id = ?
            """, (real_date, real_date, db_id))
            
            corrections += 1
            print(f"   üîß CORRIG√â en base")
        else:
            print(f"   ‚ùå Impossible de r√©cup√©rer la date")
        
        # D√©lai pour √©viter le rate limiting
        time.sleep(2)
    
    # Sauvegarder les modifications
    conn.commit()
    conn.close()
    
    print(f"\n‚úÖ Correction termin√©e : {corrections}/{len(videos)} vid√©os corrig√©es")
    
    # V√©rifier les r√©sultats
    print("\nüìä V√©rification des corrections...")
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
    SELECT 
        COUNT(*) as total,
        COUNT(CASE WHEN DATE(published_at) = '2025-07-30' THEN 1 END) as still_corrupted,
        MIN(DATE(published_at)) as earliest_date,
        MAX(DATE(published_at)) as latest_date
    FROM video 
    WHERE concurrent_id = 504
    """)
    
    result = cursor.fetchone()
    print(f"Total vid√©os: {result[0]}")
    print(f"Dates encore corrompues: {result[1]}")
    print(f"Date la plus ancienne: {result[2]}")
    print(f"Date la plus r√©cente: {result[3]}")
    
    conn.close()

if __name__ == "__main__":
    fix_pierre_vacances_dates()