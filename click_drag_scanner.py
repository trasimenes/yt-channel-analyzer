#!/usr/bin/env python3
"""
Click & Drag Scanner - Inspir√© par formazione/utilities et kodo-pp/select-rect
S√©lectionnez une r√©gion d'√©cran en cliquant et d√©pla√ßant, puis scannez horizontalement
"""

import pygame
import sys
import time
import os
import json
import threading
from datetime import datetime
import mss
import pyautogui
from PIL import Image

# Initialiser pygame et d√©sactiver le failsafe
pygame.init()
pyautogui.FAILSAFE = False

class ClickDragScanner:
    def __init__(self):
        self.scanning = False
        self.scan_data = []
        self.output_dir = "click_drag_scans"
        os.makedirs(self.output_dir, exist_ok=True)
        
        # MSS pour captures ultra-rapides
        self.sct = mss.mss()
        monitor = self.sct.monitors[1]
        self.screen_w = monitor["width"]
        self.screen_h = monitor["height"]
        
        # Variables pour la s√©lection
        self.selection_active = False
        self.start_pos = None
        self.end_pos = None
        self.selected_rect = None
        
        print(f"üéØ Click & Drag Scanner initialis√©")
        print(f"üì± √âcran: {self.screen_w}√ó{self.screen_h}")
    
    def capture_screenshot(self):
        """Capturer une image de l'√©cran entier"""
        screenshot = self.sct.grab(self.sct.monitors[1])
        return Image.frombytes("RGB", screenshot.size, screenshot.rgb)
    
    def select_region_interactive(self):
        """Interface pour s√©lectionner une r√©gion par clic-d√©placement"""
        print("\nüî¥ S√âLECTION DE R√âGION")
        print("=" * 50)
        print("‚úã Cliquez et d√©placez pour s√©lectionner la zone")
        print("üñ±Ô∏è  Clic gauche + d√©placement = s√©lection")
        print("üñ±Ô∏è  Clic droit = annuler")
        print("‚å®Ô∏è  ESC = quitter")
        
        # Capturer l'√©cran de base
        base_image = self.capture_screenshot()
        
        # Cr√©er fen√™tre pygame plein √©cran
        screen = pygame.display.set_mode((self.screen_w, self.screen_h), pygame.NOFRAME)
        pygame.display.set_caption("S√©lection de r√©gion")
        
        # Convertir PIL vers pygame surface
        pil_string_image = base_image.tobytes()
        pygame_image = pygame.image.fromstring(pil_string_image, base_image.size, "RGB")
        
        clock = pygame.time.Clock()
        selecting = False
        start_x, start_y = 0, 0
        current_x, current_y = 0, 0
        
        print("\nüî¥ Interface active ! S√©lectionnez votre zone...")
        
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    return None
                
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        pygame.quit()
                        return None
                
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if event.button == 1:  # Clic gauche
                        selecting = True
                        start_x, start_y = event.pos
                        current_x, current_y = event.pos
                    elif event.button == 3:  # Clic droit
                        pygame.quit()
                        return None
                
                elif event.type == pygame.MOUSEBUTTONUP:
                    if event.button == 1 and selecting:  # Rel√¢cher clic gauche
                        end_x, end_y = event.pos
                        
                        # Calculer rectangle final
                        x = min(start_x, end_x)
                        y = min(start_y, end_y)
                        width = abs(end_x - start_x)
                        height = abs(end_y - start_y)
                        
                        # Validation
                        if width > 20 and height > 20:
                            pygame.quit()
                            selected = {
                                'x': x, 'y': y,
                                'width': width, 'height': height
                            }
                            print(f"‚úÖ R√©gion s√©lectionn√©e: {selected}")
                            return selected
                        else:
                            print("‚ùå Zone trop petite, recommencez")
                            selecting = False
                
                elif event.type == pygame.MOUSEMOTION and selecting:
                    current_x, current_y = event.pos
            
            # Dessiner l'√©cran
            screen.blit(pygame_image, (0, 0))
            
            # Dessiner le rectangle de s√©lection
            if selecting:
                rect_x = min(start_x, current_x)
                rect_y = min(start_y, current_y)
                rect_w = abs(current_x - start_x)
                rect_h = abs(current_y - start_y)
                
                # Overlay semi-transparent
                overlay = pygame.Surface((rect_w, rect_h))
                overlay.set_alpha(50)
                overlay.fill((255, 0, 0))
                screen.blit(overlay, (rect_x, rect_y))
                
                # Bordure rouge
                pygame.draw.rect(screen, (255, 0, 0), 
                               (rect_x, rect_y, rect_w, rect_h), 3)
                
                # Afficher dimensions
                font = pygame.font.Font(None, 24)
                text = f"{rect_w} √ó {rect_h}"
                text_surface = font.render(text, True, (255, 255, 255))
                text_rect = text_surface.get_rect()
                
                # Fond noir pour le texte
                text_bg = pygame.Surface((text_rect.width + 10, text_rect.height + 6))
                text_bg.fill((0, 0, 0))
                text_bg.set_alpha(180)
                
                screen.blit(text_bg, (rect_x + 5, rect_y - 30))
                screen.blit(text_surface, (rect_x + 10, rect_y - 27))
            
            # Instructions
            font = pygame.font.Font(None, 20)
            instructions = [
                "üî¥ Cliquez et d√©placez pour s√©lectionner",
                "üñ±Ô∏è  Clic droit ou ESC pour annuler"
            ]
            
            for i, instruction in enumerate(instructions):
                text = font.render(instruction, True, (255, 255, 255))
                text_bg = pygame.Surface((text.get_width() + 10, text.get_height() + 4))
                text_bg.fill((0, 0, 0))
                text_bg.set_alpha(150)
                
                screen.blit(text_bg, (10, 10 + i * 25))
                screen.blit(text, (15, 12 + i * 25))
            
            pygame.display.flip()
            clock.tick(60)
    
    def confirm_selection(self, rect):
        """Confirmer la s√©lection avec aper√ßu"""
        print(f"\nüìê CONFIRMATION DE S√âLECTION")
        print("-" * 40)
        print(f"üî¥ Rectangle: ({rect['x']}, {rect['y']}) ‚Üí {rect['width']}√ó{rect['height']}")
        
        # Capturer la r√©gion s√©lectionn√©e
        region = {
            "top": rect['y'],
            "left": rect['x'],
            "width": rect['width'],
            "height": rect['height']
        }
        
        screenshot = self.sct.grab(region)
        preview_img = Image.frombytes("RGB", screenshot.size, screenshot.rgb)
        
        # Sauvegarder aper√ßu
        preview_path = os.path.join(self.output_dir, "selection_preview.png")
        preview_img.save(preview_path)
        print(f"üì∏ Aper√ßu sauv√©: {preview_path}")
        
        # Ouvrir l'aper√ßu
        try:
            import subprocess
            subprocess.call(["open", preview_path])
        except:
            pass
        
        # Confirmation
        while True:
            confirm = input("\n‚úÖ Confirmer cette s√©lection ? (y/n/r=refaire): ").strip().lower()
            if confirm in ['y', 'yes', 'o', 'oui', '']:
                return True
            elif confirm in ['n', 'no', 'non']:
                return False
            elif confirm in ['r', 'refaire', 'retry']:
                return 'retry'
            else:
                print("‚ùå R√©ponse invalide")
    
    def configure_scan(self):
        """Configurer les param√®tres de scan"""
        print(f"\n‚öôÔ∏è CONFIGURATION DU SCAN")
        print("-" * 40)
        
        try:
            duration = float(input("Dur√©e du scan (sec) [10]: ") or "10")
            interval = float(input("Intervalle entre captures (sec) [0.2]: ") or "0.2")
            
            captures_est = int(duration / interval)
            print(f"üì∏ Captures estim√©es: {captures_est}")
            
            return duration, interval
            
        except ValueError:
            print("‚ùå Valeurs invalides, utilisation des valeurs par d√©faut")
            return 10.0, 0.2
    
    def perform_scan(self, rect, duration, interval):
        """Effectuer le scan horizontal dans la r√©gion s√©lectionn√©e"""
        try:
            self.scanning = True
            self.scan_data = []
            
            # R√©gion MSS
            region = {
                "top": rect['y'],
                "left": rect['x'],
                "width": rect['width'],
                "height": rect['height']
            }
            
            num_captures = int(duration / interval)
            start_x = rect['x'] + 20
            end_x = rect['x'] + rect['width'] - 20
            y_pos = rect['y'] + rect['height'] // 2
            
            step_x = (end_x - start_x) / max(1, num_captures - 1)
            
            print(f"\nüöÄ SCAN EN COURS !")
            print(f"üìç Scan horizontal: X={start_x} ‚Üí {end_x}")
            print(f"üìç Position Y: {y_pos}")
            print(f"‚è±Ô∏è {num_captures} captures en {duration}s")
            
            start_time = time.time()
            
            for i in range(num_captures):
                if not self.scanning:
                    break
                
                current_x = start_x + (i * step_x)
                
                # D√©placer le curseur
                pyautogui.moveTo(current_x, y_pos, duration=0.05)
                
                # Capturer avec MSS (r√©gion sp√©cifique)
                screenshot = self.sct.grab(region)
                img = Image.frombytes("RGB", screenshot.size, screenshot.rgb)
                
                # Sauvegarder
                timestamp = int(time.time() * 1000)
                filename = f"clickdrag_{timestamp}_{i:03d}.png"
                filepath = os.path.join(self.output_dir, filename)
                img.save(filepath)
                
                self.scan_data.append({
                    'index': i,
                    'x': current_x,
                    'y': y_pos,
                    'filename': filename,
                    'timestamp': time.time()
                })
                
                if i % 5 == 0:
                    progress = (i + 1) / num_captures * 100
                    print(f"üì∏ Capture {i+1}/{num_captures} ({progress:.1f}%)")
                
                time.sleep(interval)
            
            end_time = time.time()
            actual_fps = len(self.scan_data) / (end_time - start_time)
            
            # Sauvegarder m√©tadonn√©es
            self.save_metadata(rect, duration, interval, actual_fps)
            
            print(f"\nüéâ SCAN TERMIN√â !")
            print(f"üìä {len(self.scan_data)} captures sauv√©es")
            print(f"‚ö° FPS r√©el: {actual_fps:.1f}")
            print(f"üìÅ Dossier: {self.output_dir}/")
            
        except Exception as e:
            print(f"‚ùå Erreur scan: {e}")
        finally:
            self.scanning = False
    
    def save_metadata(self, rect, duration, interval, actual_fps):
        """Sauvegarder les m√©tadonn√©es du scan"""
        timestamp = int(time.time())
        metadata_file = os.path.join(self.output_dir, f"metadata_{timestamp}.json")
        
        metadata = {
            'scan_info': {
                'method': 'Click & Drag Selection',
                'total_captures': len(self.scan_data),
                'duration': duration,
                'interval': interval,
                'actual_fps': actual_fps,
                'selected_region': rect,
                'screen_size': [self.screen_w, self.screen_h],
                'scan_date': datetime.now().isoformat()
            },
            'captures': self.scan_data
        }
        
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        print(f"üìã M√©tadonn√©es: {metadata_file}")
    
    def run(self):
        """Processus principal"""
        print("\nüéØ CLICK & DRAG SCANNER")
        print("=" * 60)
        print("üñ±Ô∏è  S√©lection par clic-d√©placement")
        print("‚ö° Scan horizontal ultra-rapide")
        print("üçé Compatible macOS")
        
        while True:
            # √âtape 1: S√©lection de r√©gion
            print(f"\nüìç √âTAPE 1: S√©lection de r√©gion")
            selected_rect = self.select_region_interactive()
            
            if not selected_rect:
                print("üëã Au revoir!")
                break
            
            # √âtape 2: Confirmation
            print(f"\nüìã √âTAPE 2: Confirmation")
            confirmation = self.confirm_selection(selected_rect)
            
            if confirmation == 'retry':
                continue
            elif not confirmation:
                print("‚ùå S√©lection annul√©e")
                continue
            
            # √âtape 3: Configuration
            print(f"\n‚öôÔ∏è √âTAPE 3: Configuration")
            duration, interval = self.configure_scan()
            
            # √âtape 4: Scan
            print(f"\nüöÄ √âTAPE 4: Scan")
            print("‚è≥ D√©marrage dans 3 secondes...")
            for i in range(3, 0, -1):
                print(f"‚è∞ {i}...")
                time.sleep(1)
            
            self.perform_scan(selected_rect, duration, interval)
            
            # Nouveau scan ?
            while True:
                again = input("\nüîÑ Nouveau scan ? (y/n): ").strip().lower()
                if again in ['y', 'yes', 'o', 'oui', '']:
                    break
                elif again in ['n', 'no', 'non']:
                    print("üëã Au revoir!")
                    return
                else:
                    print("‚ùå R√©ponse invalide")
    
    def cleanup(self):
        """Nettoyer les ressources"""
        try:
            pygame.quit()
            self.sct.close()
            print("üßπ Ressources nettoy√©es")
        except:
            pass

def main():
    print("üéØ CLICK & DRAG SCANNER")
    print("=" * 60)
    print("üñ±Ô∏è  Inspir√© par formazione/utilities")
    print("üéÆ Interface pygame interactive")
    print("üöÄ Scan ultra-rapide avec MSS")
    print("üçé Optimis√© pour macOS")
    print()
    
    scanner = None
    try:
        scanner = ClickDragScanner()
        scanner.run()
        
    except KeyboardInterrupt:
        print("\nüëã Au revoir!")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    finally:
        if scanner:
            scanner.cleanup()

if __name__ == '__main__':
    main() 