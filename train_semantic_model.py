#!/usr/bin/env python3
"""
Script pour entra√Æner le mod√®le s√©mantique avec toutes les classifications humaines.
Utilise les 49 playlists et autres vid√©os classifi√©es manuellement.
"""

import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.insert(0, str(Path(__file__).parent))

from yt_channel_analyzer.semantic_training import SemanticTrainingManager
from yt_channel_analyzer.semantic_classifier import AdvancedSemanticClassifier
from yt_channel_analyzer.database.base import get_db_connection

def main():
    print("üöÄ D√©marrage de l'entra√Ænement du mod√®le s√©mantique")
    print("=" * 60)
    
    # Cr√©er le classificateur avanc√©
    print("\nüìä Initialisation du classificateur...")
    classifier = AdvancedSemanticClassifier()
    
    # Cr√©er le gestionnaire d'entra√Ænement
    print("üìö Cr√©ation du gestionnaire d'entra√Ænement...")
    trainer = SemanticTrainingManager(classifier)
    
    # Extraire les classifications humaines
    print("\nüîç Extraction des classifications humaines de la base de donn√©es...")
    try:
        trainer.extract_human_classifications()
        print("‚úÖ Extraction termin√©e")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'extraction : {e}")
        import traceback
        traceback.print_exc()
    
    # Afficher les statistiques
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # Compter les playlists classifi√©es humainement
        cursor.execute("""
            SELECT category, COUNT(*) as count
            FROM playlist
            WHERE is_human_validated = 1 
               OR classification_source = 'human'
               OR human_verified = 1
            GROUP BY category
        """)
        playlist_count = cursor.fetchall()
        
        # Compter les vid√©os classifi√©es humainement
        cursor.execute("""
            SELECT category, COUNT(*) as count
            FROM video
            WHERE is_human_validated = 1 
               OR classification_source = 'human'
            GROUP BY category
        """)
        video_count = cursor.fetchall()
        
        print("\nüìà Statistiques des donn√©es d'entra√Ænement :")
        print("\nPlaylists classifi√©es humainement :")
        total_playlists = 0
        for cat, count in playlist_count:
            if cat:
                print(f"  - {cat}: {count} playlists")
                total_playlists += count
        print(f"  Total: {total_playlists} playlists")
        
        print("\nVid√©os classifi√©es humainement :")
        total_videos = 0
        for cat, count in video_count:
            if cat:
                print(f"  - {cat}: {count} vid√©os")
                total_videos += count
        print(f"  Total: {total_videos} vid√©os")
    finally:
        conn.close()
    
    # Entra√Æner le mod√®le
    print("\nüß† Entra√Ænement du mod√®le s√©mantique...")
    trainer.train_semantic_model()
    
    # Afficher les nouveaux prototypes
    print("\n‚úÖ Entra√Ænement termin√© !")
    print(f"\nPrototypes finaux par cat√©gorie :")
    for category, examples in classifier.category_prototypes.items():
        print(f"  - {category}: {len(examples)} exemples")
    
    # Tester le mod√®le sur quelques exemples
    print("\nüß™ Test du mod√®le sur quelques exemples :")
    test_texts = [
        "Visit Center Parcs - Summer Activities",
        "How to book your holiday",
        "Behind the scenes at our parks",
        "Top 10 family activities"
    ]
    
    for text in test_texts:
        category, confidence = classifier.classify(text)
        print(f"  '{text}' -> {category} (confiance: {confidence:.2f})")
    
    print("\n‚ú® Mod√®le pr√™t √† l'emploi !")
    print("Pour utiliser le mod√®le entra√Æn√©, importez AdvancedSemanticClassifier")

if __name__ == "__main__":
    main()