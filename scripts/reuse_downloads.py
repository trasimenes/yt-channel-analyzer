#!/usr/bin/env python3
"""
‚ôªÔ∏è REUSE DOWNLOADS
R√©utilise les t√©l√©chargements de venv_semantic avec Python 3.12
√âconomise 40 minutes de re-t√©l√©chargement !
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_cmd(cmd, ignore_errors=False):
    """Ex√©cute une commande shell"""
    print(f"üîÑ {cmd}")
    try:
        result = subprocess.run(cmd, shell=True, check=not ignore_errors, timeout=300)
        if result.returncode == 0:
            print("‚úÖ Succ√®s")
            return True
        else:
            print(f"‚ö†Ô∏è  √âchec mais on continue...")
            return False
    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout")
        return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur: {e}")
        return False

def main():
    print("‚ôªÔ∏è REUSE DOWNLOADS - R√©utilisation intelligente")
    print("=" * 45)
    
    # 1. V√©rifier Python 3.12 disponible
    print("üêç V√©rification Python 3.12...")
    result = run_cmd("python3.12 --version", ignore_errors=True)
    if not result:
        print("‚ùå Python 3.12 pas encore install√©")
        print("üí° Attendez que Homebrew finisse, puis relancez ce script")
        return False
    
    # 2. Trouver le cache pip existant
    print("üîç Recherche du cache pip...")
    cache_dir = Path.home() / ".cache" / "pip"
    if not cache_dir.exists():
        cache_dir = Path("/tmp/pip-cache")
    
    print(f"üì¶ Cache pip trouv√©: {cache_dir}")
    
    # 3. Cr√©er venv_semantic_312 (copie de venv_semantic mais avec Python 3.12)
    print("üèóÔ∏è  Cr√©ation venv_semantic_312...")
    
    # Supprimer l'ancien s'il existe
    if Path("venv_semantic_312").exists():
        print("üßπ Suppression ancien venv_semantic_312...")
        shutil.rmtree("venv_semantic_312")
    
    # Cr√©er le nouveau
    run_cmd("python3.12 -m venv venv_semantic_312")
    
    # 4. Installer rapidement en utilisant le cache
    print("‚ö° Installation ultra-rapide avec cache...")
    
    # Commandes d'installation avec cache
    install_commands = [
        f"source venv_semantic_312/bin/activate && pip install --cache-dir {cache_dir} --upgrade pip setuptools wheel",
        f"source venv_semantic_312/bin/activate && pip install --cache-dir {cache_dir} torch torchvision torchaudio",
        f"source venv_semantic_312/bin/activate && pip install --cache-dir {cache_dir} sentence-transformers",
        f"source venv_semantic_312/bin/activate && pip install --cache-dir {cache_dir} transformers tokenizers",
        f"source venv_semantic_312/bin/activate && pip install --cache-dir {cache_dir} numpy scipy scikit-learn"
    ]
    
    for cmd in install_commands:
        print(f"üì• Installation avec cache...")
        success = run_cmd(cmd, ignore_errors=True)
        if not success:
            print("‚ö†Ô∏è  Installation √©chou√©e, mais on continue...")
    
    # 5. Test final
    print("üß™ Test des imports...")
    test_cmd = "source venv_semantic_312/bin/activate && python -c \"import torch; import sentence_transformers; print('‚úÖ Tout fonctionne!')\""
    success = run_cmd(test_cmd, ignore_errors=True)
    
    if success:
        print("üéâ SUCC√àS ! venv_semantic_312 pr√™t avec Python 3.12")
        print("üí° Pour utiliser:")
        print("   source venv_semantic_312/bin/activate")
        print("   python -c 'import sentence_transformers'")
        
        # 6. Renommer l'ancien et le nouveau
        print("\nüîÑ Remplacement des environnements...")
        print("üí° Prochaine √©tape: Renommer venv_semantic -> venv_semantic_old")
        print("üí° Puis: Renommer venv_semantic_312 -> venv_semantic")
        
        return True
    else:
        print("‚ùå √âchec du test final")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 