#!/usr/bin/env python3
"""
Script pour migrer les donn√©es des concurrents depuis le fichier JSON vers la base de donn√©es SQLite.
"""

import sys
import os
import json
from datetime import datetime

# Ajouter le chemin du projet au PYTHONPATH
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Importer la fonction correcte depuis le nouveau module
from yt_channel_analyzer.database.videos import save_competitor_and_videos

def migrate_data():
    """Migrer les donn√©es depuis le fichier JSON vers la base de donn√©es SQLite."""
    json_path = os.path.join(project_root, 'cache_recherches', 'recherches.json')
    
    print("üöÄ D√©but de la migration des donn√©es JSON vers la base de donn√©es")
    print("="*60)
    
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"‚ùå Erreur de chargement du JSON: {e}")
        return

    print(f"üìñ Chargement des donn√©es depuis: {json_path}")
    print(f"üìä {len(data)} concurrents trouv√©s dans le JSON")

    success_count = 0
    fail_count = 0

    for channel_url, competitor_data in data.items():
        print(f"\nüîÑ Traitement de: {competitor_data.get('channel_info', {}).get('title', channel_url)}")
        
        videos = competitor_data.get('videos', [])
        channel_info = competitor_data.get('channel_info', {})
        
        if not videos:
            print("  ‚ö†Ô∏è Aucune vid√©o trouv√©e pour ce concurrent. Ignor√©.")
            continue
            
        try:
            # La fonction save_competitor_and_videos g√®re tout :
            # cr√©ation/update du concurrent et ajout/update des vid√©os.
            competitor_id = save_competitor_and_videos(
                channel_url=channel_url,
                videos=videos,
                channel_info=channel_info
            )
            print(f"  ‚úÖ Concurrent et vid√©os sauvegard√©s avec succ√®s. ID: {competitor_id}")
            success_count += 1
        except Exception as e:
            print(f"  ‚ùå Erreur d'import pour {channel_url}: {e}")
            fail_count += 1

    print("\n" + "="*60)
    print("üéâ Migration termin√©e!")
    print(f"‚úÖ Concurrents import√©s avec succ√®s: {success_count}")
    print(f"‚ùå Concurrents en √©chec: {fail_count}")

if __name__ == '__main__':
    migrate_data() 