#!/usr/bin/env python3
"""
Script de configuration et d√©monstration du syst√®me de classification s√©mantique
Remplace l'approche par mots-cl√©s par une vraie compr√©hension s√©mantique
"""

import os
import sys
import subprocess
import json
from datetime import datetime

def install_requirements():
    """
    Installe les d√©pendances n√©cessaires pour la classification s√©mantique
    """
    print("üîß Installation des d√©pendances...")
    
    requirements = [
        "sentence-transformers>=2.2.0",
        "scikit-learn>=1.0.0",
        "numpy>=1.21.0",
        "torch>=1.9.0"
    ]
    
    for req in requirements:
        try:
            print(f"   üì¶ Installation de {req}...")
            subprocess.run([sys.executable, "-m", "pip", "install", req], check=True, capture_output=True)
            print(f"   ‚úÖ {req} install√© avec succ√®s")
        except subprocess.CalledProcessError as e:
            print(f"   ‚ùå Erreur lors de l'installation de {req}: {e}")
            return False
    
    print("‚úÖ Toutes les d√©pendances sont install√©es")
    return True


def test_semantic_classification():
    """
    Teste le syst√®me de classification s√©mantique
    """
    print("\nüß™ Test du syst√®me de classification s√©mantique...")
    
    # Import des modules
    try:
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        from yt_channel_analyzer.semantic_integration import semantic_manager, compare_classification_methods
        
        if not semantic_manager.enabled:
            print("‚ùå Le syst√®me s√©mantique n'est pas disponible")
            return False
        
        print("‚úÖ Syst√®me s√©mantique initialis√©")
        
        # Tests de classification
        test_cases = [
            {
                'title': "D√©couverte exclusive du nouveau Club Med aux Seychelles",
                'description': "Premi√®re mondiale : visitez en avant-premi√®re notre nouveau resort de luxe",
                'expected_type': 'HERO (nouveau/exclusif)'
            },
            {
                'title': "Les plus belles plages de Maurice - Episode 3",
                'description': "Troisi√®me √©pisode de notre s√©rie sur les destinations paradisiaques",
                'expected_type': 'HUB (s√©rie r√©guli√®re)'
            },
            {
                'title': "Comment r√©server votre s√©jour Club Med",
                'description': "Tutoriel complet pour effectuer votre r√©servation en ligne",
                'expected_type': 'HELP (tutoriel)'
            }
        ]
        
        for i, test in enumerate(test_cases, 1):
            print(f"\nüéØ Test {i}: {test['title']}")
            
            # Comparaison des m√©thodes
            comparison = compare_classification_methods(test['title'], test['description'])
            
            if comparison['semantic_result'] and 'category' in comparison['semantic_result']:
                sem_result = comparison['semantic_result']
                print(f"   üß† S√©mantique: {sem_result['category'].upper()} ({sem_result['confidence']:.1f}%)")
            
            if comparison['traditional_result'] and 'category' in comparison['traditional_result']:
                trad_result = comparison['traditional_result']
                print(f"   üìù Traditionnel: {trad_result['category'].upper()} ({trad_result['confidence']:.1f}%)")
            
            if comparison['agreement']:
                print(f"   ‚úÖ Accord entre les m√©thodes")
            else:
                print(f"   ‚ö†Ô∏è  D√©saccord entre les m√©thodes")
            
            print(f"   üí° Attendu: {test['expected_type']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False


def demonstrate_semantic_understanding():
    """
    D√©montre la diff√©rence entre compr√©hension s√©mantique et matching de mots-cl√©s
    """
    print("\nüé≠ D√©monstration de la compr√©hension s√©mantique vs mots-cl√©s...")
    
    try:
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        from yt_channel_analyzer.semantic_classifier import SemanticHubHeroHelpClassifier
        
        classifier = SemanticHubHeroHelpClassifier()
        
        # Exemples qui montrent la diff√©rence
        examples = [
            {
                'title': "R√©v√©lation choc : la destination secr√®te que personne ne conna√Æt",
                'description': "D√©couvrez en exclusivit√© mondiale ce paradis cach√©",
                'explanation': "Contient des mots comme 'r√©v√©lation', 'exclusivit√©', 'secret' qui indiquent du HERO sans utiliser les mots-cl√©s habituels"
            },
            {
                'title': "Nos √©quipes vous racontent leur quotidien",
                'description': "Rencontrez les personnes qui font la magie Club Med chaque jour",
                'explanation': "Contenu r√©gulier sur les √©quipes, typique HUB, sans mots-cl√©s √©vidents"
            },
            {
                'title': "Probl√®me avec votre r√©servation ? Voici la solution",
                'description': "R√©solvez rapidement les difficult√©s de r√©servation en ligne",
                'explanation': "Aide pour r√©soudre un probl√®me, clairement HELP m√™me sans 'tutoriel' ou 'guide'"
            }
        ]
        
        for i, example in enumerate(examples, 1):
            print(f"\nüîç Exemple {i}:")
            print(f"   üìù Titre: {example['title']}")
            print(f"   üìÑ Description: {example['description']}")
            
            # Classification s√©mantique
            category, confidence, details = classifier.classify_text(example['title'], example['description'])
            print(f"   üß† Classification s√©mantique: {category.upper()} ({confidence:.1f}%)")
            
            # Explication
            explanation = classifier.explain_classification(example['title'], example['description'])
            print(f"   üí≠ Raisonnement: {explanation['reasoning']}")
            print(f"   üéØ Pourquoi c'est int√©ressant: {example['explanation']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        return False


def create_configuration_file():
    """
    Cr√©e un fichier de configuration pour le syst√®me s√©mantique
    """
    print("\n‚öôÔ∏è Cr√©ation du fichier de configuration...")
    
    config = {
        "semantic_classification": {
            "enabled": True,
            "model_name": "sentence-transformers/all-MiniLM-L6-v2",
            "semantic_weight": 0.7,
            "confidence_threshold": 60,
            "auto_learn": True,
            "fallback_to_traditional": True
        },
        "performance": {
            "batch_size": 32,
            "max_sequence_length": 512,
            "use_gpu": False
        },
        "logging": {
            "log_classifications": True,
            "log_explanations": False,
            "log_comparisons": True
        },
        "created_at": datetime.now().isoformat(),
        "version": "1.0.0"
    }
    
    config_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 
                              "config", "semantic_config.json")
    
    # Cr√©ation du dossier config s'il n'existe pas
    os.makedirs(os.path.dirname(config_path), exist_ok=True)
    
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ Configuration cr√©√©e: {config_path}")
    return config_path


def show_integration_examples():
    """
    Montre des exemples d'int√©gration avec l'application existante
    """
    print("\nüîå Exemples d'int√©gration avec l'application existante...")
    
    integration_code = '''
# Dans votre application Flask existante, remplacez:

# ANCIEN CODE (matching de mots-cl√©s):
from yt_channel_analyzer.database import classify_video_with_language
category, language, confidence = classify_video_with_language(title, description)

# NOUVEAU CODE (compr√©hension s√©mantique):
from yt_channel_analyzer.semantic_integration import classify_video_enhanced
category, language, confidence = classify_video_enhanced(title, description)

# Pour une classification en lot:
from yt_channel_analyzer.semantic_integration import batch_classify_enhanced
classified_videos = batch_classify_enhanced(videos)

# Pour ajouter un feedback d'apprentissage:
from yt_channel_analyzer.semantic_integration import add_semantic_feedback
add_semantic_feedback(title, description, correct_category, "Correction utilisateur")

# Pour comparer les m√©thodes:
from yt_channel_analyzer.semantic_integration import compare_classification_methods
comparison = compare_classification_methods(title, description)
'''
    
    print(integration_code)
    
    # Sauvegarde de l'exemple
    example_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 
                               "examples", "semantic_integration_example.py")
    
    os.makedirs(os.path.dirname(example_path), exist_ok=True)
    
    with open(example_path, 'w', encoding='utf-8') as f:
        f.write(integration_code)
    
    print(f"‚úÖ Exemple sauvegard√©: {example_path}")


def main():
    """
    Fonction principale du script de configuration
    """
    print("="*60)
    print("üöÄ CONFIGURATION DU SYST√àME DE CLASSIFICATION S√âMANTIQUE")
    print("="*60)
    print()
    print("Ce script va configurer un syst√®me de classification qui COMPREND")
    print("vraiment le sens des textes au lieu de faire du matching de mots-cl√©s.")
    print()
    
    # √âtape 1: Installation des d√©pendances
    if not install_requirements():
        print("‚ùå √âchec de l'installation des d√©pendances")
        return
    
    # √âtape 2: Test du syst√®me
    if not test_semantic_classification():
        print("‚ùå √âchec du test du syst√®me s√©mantique")
        return
    
    # √âtape 3: D√©monstration de la compr√©hension s√©mantique
    if not demonstrate_semantic_understanding():
        print("‚ùå √âchec de la d√©monstration")
        return
    
    # √âtape 4: Configuration
    config_path = create_configuration_file()
    
    # √âtape 5: Exemples d'int√©gration
    show_integration_examples()
    
    print("\n" + "="*60)
    print("‚úÖ CONFIGURATION TERMIN√âE AVEC SUCC√àS")
    print("="*60)
    print()
    print("üéØ Le syst√®me de classification s√©mantique est maintenant pr√™t !")
    print()
    print("üìã Prochaines √©tapes:")
    print("   1. Int√©grez le nouveau syst√®me dans votre application")
    print("   2. Testez sur vos donn√©es r√©elles")
    print("   3. Ajustez les param√®tres selon vos besoins")
    print("   4. Collectez des feedbacks pour am√©liorer la pr√©cision")
    print()
    print("üîó Pour utiliser le syst√®me:")
    print("   - Importez les fonctions depuis semantic_integration")
    print("   - Remplacez les appels existants par les nouvelles fonctions")
    print("   - Surveillez les performances et ajustez si n√©cessaire")
    print()


if __name__ == "__main__":
    main() 