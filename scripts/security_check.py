#!/usr/bin/env python3
"""
Script de v√©rification de s√©curit√© pour YouTube Channel Analyzer
V√©rifie qu'aucune information sensible n'est expos√©e avant upload sur Git
"""

import os
import re
import sys
from pathlib import Path

# Patterns de secrets √† d√©tecter
SECRET_PATTERNS = [
    (r'AIzaSy[A-Za-z0-9_-]{35}', 'Cl√© API Google/YouTube'),
    (r'sk_[A-Za-z0-9]{48}', 'Cl√© secr√®te Stripe'),
    (r'pk_[A-Za-z0-9]{50}', 'Cl√© publique Stripe'),
    (r'password\s*[=:]\s*["\'][^"\']{8,}["\']', 'Mot de passe hardcod√©'),
    (r'secret\s*[=:]\s*["\'][^"\']{8,}["\']', 'Secret hardcod√©'),
    (r'api_key\s*[=:]\s*["\'][^"\']{8,}["\']', 'Cl√© API hardcod√©e'),
    (r'token\s*[=:]\s*["\'][^"\']{16,}["\']', 'Token hardcod√©'),
    (r'Palermo1990', 'Mot de passe sp√©cifique d√©tect√©'),
    (r'baptiste.*password|password.*baptiste', 'Credentials sp√©cifiques'),
]

# Extensions de fichiers √† v√©rifier
EXTENSIONS_TO_CHECK = ['.py', '.js', '.json', '.md', '.txt', '.yml', '.yaml', '.env.example']

# Fichiers et dossiers √† ignorer
IGNORE_PATTERNS = [
    '.git/',
    '__pycache__/',
    'node_modules/',
    '.env',  # Le vrai .env doit √™tre ignor√© par Git
    'venv/',
    'env/',
    '.vscode/',
    '.idea/',
]

def should_ignore_file(file_path):
    """V√©rifie si un fichier doit √™tre ignor√©"""
    for pattern in IGNORE_PATTERNS:
        if pattern in str(file_path):
            return True
    return False

def check_file_for_secrets(file_path):
    """V√©rifie un fichier pour des secrets potentiels"""
    issues = []
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
            
        for line_num, line in enumerate(content.split('\n'), 1):
            for pattern, description in SECRET_PATTERNS:
                if re.search(pattern, line, re.IGNORECASE):
                    issues.append({
                        'file': file_path,
                        'line': line_num,
                        'content': line.strip(),
                        'issue': description,
                        'pattern': pattern
                    })
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de la lecture de {file_path}: {e}")
    
    return issues

def main():
    """Fonction principale"""
    print("üîí V√©rification de s√©curit√© - YouTube Channel Analyzer")
    print("=" * 60)
    
    project_root = Path(__file__).parent.parent
    all_issues = []
    files_checked = 0
    
    # Parcourir tous les fichiers du projet
    for file_path in project_root.rglob('*'):
        if file_path.is_file() and not should_ignore_file(file_path):
            if file_path.suffix in EXTENSIONS_TO_CHECK:
                files_checked += 1
                issues = check_file_for_secrets(file_path)
                all_issues.extend(issues)
    
    print(f"üìÅ Fichiers v√©rifi√©s: {files_checked}")
    print()
    
    if all_issues:
        print("üö® PROBL√àMES DE S√âCURIT√â D√âTECT√âS:")
        print("=" * 40)
        
        for issue in all_issues:
            print(f"üìÑ Fichier: {issue['file']}")
            print(f"üìç Ligne: {issue['line']}")
            print(f"‚ö†Ô∏è  Probl√®me: {issue['issue']}")
            print(f"üìù Contenu: {issue['content'][:100]}...")
            print("-" * 40)
        
        print(f"\n‚ùå TOTAL: {len(all_issues)} probl√®me(s) d√©tect√©(s)")
        print("\nüîß ACTIONS REQUISES:")
        print("1. Remplacez les secrets hardcod√©s par des variables d'environnement")
        print("2. Utilisez des exemples g√©n√©riques dans les fichiers de documentation")
        print("3. V√©rifiez que les vrais secrets sont dans .env (ignor√© par Git)")
        
        return 1
    else:
        print("‚úÖ AUCUN PROBL√àME D√âTECT√â")
        print("üéâ Votre projet est s√©curis√© pour l'upload sur Git!")
        
        # V√©rifications suppl√©mentaires
        print("\nüîç V√©rifications suppl√©mentaires:")
        
        # V√©rifier que .env existe mais n'est pas versionn√©
        env_file = project_root / '.env'
        if env_file.exists():
            print("‚úÖ Fichier .env trouv√© localement")
        else:
            print("‚ö†Ô∏è  Aucun fichier .env trouv√© (normal si pas encore cr√©√©)")
        
        # V√©rifier .gitignore
        gitignore_file = project_root / '.gitignore'
        if gitignore_file.exists():
            with open(gitignore_file, 'r') as f:
                gitignore_content = f.read()
                if '.env' in gitignore_content:
                    print("‚úÖ .env est bien dans .gitignore")
                else:
                    print("‚ùå .env n'est PAS dans .gitignore - AJOUTEZ-LE!")
                    return 1
        
        print("\nüöÄ Pr√™t pour git push!")
        return 0

if __name__ == "__main__":
    sys.exit(main())