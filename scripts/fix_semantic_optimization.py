#!/usr/bin/env python3
"""
Script pour corriger les erreurs s√©mantiques et optimiser le syst√®me
- Cr√©e la table custom_classification_rules manquante
- Optimise la classification pour ne pas initialiser le sentence transformer √† chaque fois
- Ajoute un mode "base seulement" pour le quotidien
"""

import sqlite3
import sys
import os
from datetime import datetime

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from yt_channel_analyzer.database import get_db_connection

def create_missing_table():
    """Cr√©er la table custom_classification_rules manquante"""
    print("üîß Cr√©ation de la table custom_classification_rules...")
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # Cr√©er la table avec la structure attendue
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS custom_classification_rules (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                pattern TEXT NOT NULL,
                category TEXT NOT NULL,
                language TEXT DEFAULT 'all',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(pattern, category, language)
            )
        ''')
        
        # Migrer les donn√©es de custom_rules vers custom_classification_rules si elle existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='custom_rules'")
        if cursor.fetchone():
            print("üì¶ Migration des donn√©es de custom_rules vers custom_classification_rules...")
            cursor.execute('''
                INSERT OR IGNORE INTO custom_classification_rules (pattern, category, language, created_at)
                SELECT pattern, category, language, created_at FROM custom_rules
            ''')
        
        conn.commit()
        print("‚úÖ Table custom_classification_rules cr√©√©e avec succ√®s")
        
        # V√©rifier le contenu
        cursor.execute("SELECT COUNT(*) FROM custom_classification_rules")
        count = cursor.fetchone()[0]
        print(f"üìä {count} r√®gles personnalis√©es dans la table")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå Erreur lors de la cr√©ation de la table: {e}")
        return False
    finally:
        conn.close()
    
    return True

def add_semantic_settings():
    """Ajouter les param√®tres s√©mantiques √† la table settings"""
    print("‚öôÔ∏è  Ajout des param√®tres s√©mantiques...")
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # Cr√©er la table settings si elle n'existe pas
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS settings (
                key TEXT PRIMARY KEY,
                value TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Ajouter les param√®tres s√©mantiques avec des valeurs par d√©faut
        settings = [
            ('semantic_classification_enabled', 'false'),  # D√©sactiv√© par d√©faut
            ('semantic_auto_init', 'false'),  # Pas d'initialisation automatique
            ('semantic_model', 'all-MiniLM-L6-v2'),  # Mod√®le par d√©faut
            ('semantic_weight', '0.7'),  # Poids du s√©mantique
            ('pattern_weight', '0.3'),  # Poids des patterns
            ('classification_mode', 'database_only'),  # Mode par d√©faut : base uniquement
        ]
        
        for key, value in settings:
            cursor.execute('''
                INSERT OR IGNORE INTO settings (key, value)
                VALUES (?, ?)
            ''', (key, value))
        
        conn.commit()
        print("‚úÖ Param√®tres s√©mantiques ajout√©s")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå Erreur lors de l'ajout des param√®tres: {e}")
        return False
    finally:
        conn.close()
    
    return True

def optimize_database():
    """Optimiser la base de donn√©es"""
    print("üöÄ Optimisation de la base de donn√©es...")
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # Cr√©er des index pour acc√©l√©rer les requ√™tes de classification
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_video_category ON video (category)",
            "CREATE INDEX IF NOT EXISTS idx_video_classification_source ON video (classification_source)",
            "CREATE INDEX IF NOT EXISTS idx_video_human_verified ON video (human_verified)",
            "CREATE INDEX IF NOT EXISTS idx_custom_rules_category ON custom_classification_rules (category)",
            "CREATE INDEX IF NOT EXISTS idx_custom_rules_language ON custom_classification_rules (language)",
        ]
        
        for index_sql in indexes:
            cursor.execute(index_sql)
        
        # Analyser la base pour optimiser les requ√™tes
        cursor.execute("ANALYZE")
        
        conn.commit()
        print("‚úÖ Base de donn√©es optimis√©e")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå Erreur lors de l'optimisation: {e}")
        return False
    finally:
        conn.close()
    
    return True

def show_classification_stats():
    """Afficher les statistiques de classification"""
    print("üìä Statistiques de classification...")
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # Statistiques g√©n√©rales
        cursor.execute("SELECT COUNT(*) FROM video")
        total_videos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM video WHERE category IS NOT NULL")
        classified_videos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM video WHERE human_verified = 1")
        human_verified = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM custom_classification_rules")
        custom_rules = cursor.fetchone()[0]
        
        # Statistiques par cat√©gorie
        cursor.execute('''
            SELECT category, COUNT(*) as count
            FROM video 
            WHERE category IS NOT NULL
            GROUP BY category
        ''')
        categories = cursor.fetchall()
        
        print(f"üìà Total vid√©os: {total_videos}")
        print(f"üìà Vid√©os classifi√©es: {classified_videos} ({classified_videos/total_videos*100:.1f}%)")
        print(f"üìà V√©rifications humaines: {human_verified}")
        print(f"üìà R√®gles personnalis√©es: {custom_rules}")
        
        print("\nüìä R√©partition par cat√©gorie:")
        for category, count in categories:
            print(f"  {category.upper()}: {count} vid√©os")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du calcul des statistiques: {e}")
    finally:
        conn.close()

def main():
    """Fonction principale"""
    print("üîß OPTIMISATION DU SYST√àME S√âMANTIQUE")
    print("=" * 50)
    
    # √âtape 1: Cr√©er la table manquante
    if not create_missing_table():
        print("‚ùå √âchec de la cr√©ation de la table")
        return False
    
    # √âtape 2: Ajouter les param√®tres s√©mantiques
    if not add_semantic_settings():
        print("‚ùå √âchec de l'ajout des param√®tres")
        return False
    
    # √âtape 3: Optimiser la base
    if not optimize_database():
        print("‚ùå √âchec de l'optimisation")
        return False
    
    # √âtape 4: Afficher les statistiques
    show_classification_stats()
    
    print("\nüéâ OPTIMISATION TERMIN√âE !")
    print("üí° Le syst√®me est maintenant configur√© pour :")
    print("  - Utiliser les classifications d√©j√† en base au quotidien")
    print("  - Ne pas initialiser le sentence transformer automatiquement")
    print("  - Permettre l'activation s√©mantique √† la demande")
    print("  - Acc√©l√©rer les requ√™tes de classification")
    
    return True

if __name__ == "__main__":
    main() 