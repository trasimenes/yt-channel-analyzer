#!/usr/bin/env python3
"""
Script de correction syst√©mique de la propagation playlist ‚Üí vid√©os
SOLUTION GLOBALE pour tous les concurrents
"""
import sys
from pathlib import Path

# Ajouter le r√©pertoire racine au path
sys.path.append(str(Path(__file__).parent))

from yt_channel_analyzer.database import get_db_connection
from yt_channel_analyzer.hierarchical_classifier import HierarchicalClassifier

def fix_systematic_propagation():
    """
    Correction syst√©mique de la propagation pour TOUS les concurrents
    """
    
    print("üîß CORRECTION SYST√âMIQUE PROPAGATION PLAYLIST ‚Üí VID√âOS")
    print("=" * 80)
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # √âTAPE 1: Identifier TOUS les cas de propagation incorrecte
    print("üîç √âTAPE 1: Audit global des propagations incorrectes")
    
    cursor.execute("""
        SELECT 
            c.id as competitor_id,
            c.name as competitor_name,
            COUNT(v.id) as affected_videos,
            v.classification_source
        FROM video v
        JOIN concurrent c ON v.concurrent_id = c.id
        WHERE v.classification_source LIKE '%fallback%'
           OR v.classification_source LIKE '%propagated%'
        GROUP BY c.id, c.name, v.classification_source
        ORDER BY affected_videos DESC
    """)
    
    propagation_issues = cursor.fetchall()
    
    if not propagation_issues:
        print("‚úÖ Aucun probl√®me de propagation d√©tect√©")
        conn.close()
        return True
    
    print(f"‚ö†Ô∏è Probl√®mes d√©tect√©s sur {len(propagation_issues)} cas:")
    for issue in propagation_issues:
        competitor_id, name, count, source = issue
        print(f"  - {name} (ID {competitor_id}): {count} vid√©os avec source '{source}'")
    
    # √âTAPE 2: Nettoyer TOUTES les propagations incorrectes
    print(f"\nüßπ √âTAPE 2: Nettoyage des propagations incorrectes")
    
    cursor.execute("""
        UPDATE video 
        SET category = NULL,
            classification_source = NULL,
            is_human_validated = 0,
            classification_date = NULL
        WHERE classification_source LIKE '%fallback%'
           OR (classification_source LIKE '%propagated%' 
               AND classification_source NOT LIKE '%human%')
    """)
    
    cleaned_videos = cursor.rowcount
    print(f"üßπ {cleaned_videos} vid√©os nettoy√©es")
    
    # √âTAPE 3: Identifier les playlists valid√©es humainement
    print(f"\nü•á √âTAPE 3: R√©cup√©ration des playlists valid√©es humainement")
    
    cursor.execute("""
        SELECT 
            p.id,
            p.playlist_id as youtube_id,
            p.name,
            p.category,
            p.concurrent_id,
            c.name as competitor_name,
            p.video_count
        FROM playlist p
        JOIN concurrent c ON p.concurrent_id = c.id
        WHERE (p.human_verified = 1 OR p.classification_source = 'human')
          AND p.category IS NOT NULL
          AND p.category != 'uncategorized'
        ORDER BY c.name, p.name
    """)
    
    human_playlists = cursor.fetchall()
    
    if not human_playlists:
        print("‚ö†Ô∏è Aucune playlist valid√©e humainement trouv√©e")
        conn.close()
        return False
    
    print(f"üéØ {len(human_playlists)} playlists valid√©es humainement:")
    for playlist in human_playlists:
        playlist_id, youtube_id, name, category, competitor_id, competitor_name, video_count = playlist
        print(f"  - {competitor_name}: {name} ‚Üí {category.upper()} ({video_count} vid√©os)")
    
    # √âTAPE 4: Propagation intelligente pour chaque playlist humaine
    print(f"\nüîÑ √âTAPE 4: Propagation intelligente et s√©curis√©e")
    
    classifier = HierarchicalClassifier(conn)
    total_videos_updated = 0
    successful_propagations = 0
    
    for playlist in human_playlists:
        playlist_id, youtube_id, name, category, competitor_id, competitor_name, expected_count = playlist
        
        print(f"\nüìã Traitement: {name} ({competitor_name})")
        print(f"   Category: {category.upper()}, Vid√©os attendues: {expected_count}")
        
        # V√©rifier s'il y a des liens playlist_video
        cursor.execute("""
            SELECT COUNT(*) 
            FROM playlist_video pv
            JOIN playlist p ON pv.playlist_id = p.playlist_id 
            WHERE p.id = ?
        """, (playlist_id,))
        
        existing_links = cursor.fetchone()[0]
        print(f"   Liens existants: {existing_links}")
        
        if existing_links > 0:
            # Propagation normale via les liens existants
            videos_updated = classifier.propagate_playlist_to_videos(
                playlist_id=playlist_id,
                force_human_authority=True
            )
            
            if videos_updated > 0:
                print(f"   ‚úÖ {videos_updated} vid√©os propag√©es via liens existants")
                total_videos_updated += videos_updated
                successful_propagations += 1
            else:
                print(f"   ‚ö†Ô∏è Aucune vid√©o propag√©e (liens invalides?)")
        
        else:
            # PAS de propagation fallback automatique !
            print(f"   ‚ö†Ô∏è Aucun lien playlist_video - PROPAGATION IGNOR√âE")
            print(f"   üí° Solution: Utiliser l'API YouTube pour cr√©er les liens corrects")
    
    # √âTAPE 5: Rapport final
    print(f"\n" + "=" * 80)
    print(f"üìä RAPPORT FINAL")
    print(f"   - Vid√©os nettoy√©es: {cleaned_videos}")
    print(f"   - Playlists humaines trouv√©es: {len(human_playlists)}")
    print(f"   - Propagations r√©ussies: {successful_propagations}")
    print(f"   - Total vid√©os propag√©es: {total_videos_updated}")
    
    if successful_propagations < len(human_playlists):
        missing = len(human_playlists) - successful_propagations
        print(f"   ‚ö†Ô∏è {missing} playlists n√©cessitent une liaison API YouTube")
    
    conn.commit()
    conn.close()
    
    print(f"\nüéâ CORRECTION SYST√âMIQUE TERMIN√âE")
    
    if total_videos_updated > 0:
        print(f"‚úÖ {total_videos_updated} vid√©os correctement propag√©es")
        return True
    else:
        print(f"‚ö†Ô∏è Aucune propagation effectu√©e - liens manquants")
        return False

if __name__ == "__main__":
    fix_systematic_propagation()