import threading
import time
import uuid
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict, field
import json
import os

@dataclass
class BackgroundTask:
    """Repr√©sente une t√¢che en arri√®re-plan"""
    id: str
    channel_url: str
    channel_name: str
    status: str  # 'running', 'completed', 'error', 'paused'
    progress: int  # 0-100
    current_step: str
    videos_found: int
    videos_processed: int
    total_estimated: int
    start_time: str
    end_time: Optional[str] = None
    error_message: Optional[str] = None
    channel_thumbnail: Optional[str] = None
    task_type: str = 'channel_analysis'  # 'channel_analysis', 'sentiment_analysis', etc.
    description: str = ''
    extra_data: dict = field(default_factory=dict)
    
    def to_dict(self):
        return asdict(self)

class BackgroundTaskManager:
    """Gestionnaire des t√¢ches en arri√®re-plan"""
    
    def __init__(self):
        self.tasks: Dict[str, BackgroundTask] = {}
        self.running_tasks: Dict[str, threading.Thread] = {}
        self.task_file = "cache_recherches/background_tasks.json"
        self.stop_flags: Dict[str, bool] = {}  # Flags d'arr√™t pour chaque t√¢che
        self.load_tasks()
    
    def load_tasks(self):
        """Charge les t√¢ches depuis le fichier"""
        try:
            if os.path.exists(self.task_file):
                with open(self.task_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    for task_data in data:
                        task = BackgroundTask(**task_data)
                        # Marquer les t√¢ches "running" comme interrompues au red√©marrage
                        if task.status == 'running':
                            task.status = 'paused'
                        self.tasks[task.id] = task
        except Exception as e:
            print(f"[TASKS] Erreur lors du chargement des t√¢ches: {e}")
    
    def save_tasks(self):
        """Sauvegarde les t√¢ches dans le fichier"""
        try:
            os.makedirs(os.path.dirname(self.task_file), exist_ok=True)
            with open(self.task_file, 'w', encoding='utf-8') as f:
                tasks_data = [task.to_dict() for task in self.tasks.values()]
                json.dump(tasks_data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"[TASKS] Erreur lors de la sauvegarde des t√¢ches: {e}")
    
    def start_generic_task(self, task_id: str, task_type: str, description: str, total_estimated: int = 0, extra_data: dict = None) -> str:
        """Cr√©e une t√¢che g√©n√©rique (non-YouTube)"""
        
        task = BackgroundTask(
            id=task_id,
            channel_url=task_type,  # Utilise task_type comme identifiant
            channel_name=description,
            status='running',
            progress=0,
            current_step='Initialisation...',
            videos_found=0,
            videos_processed=0,
            total_estimated=total_estimated,
            start_time=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            task_type=task_type,
            description=description,
            extra_data=extra_data or {}
        )
        self.tasks[task_id] = task
        self.save_tasks()
        return task_id
    
    def create_task(self, channel_url: str, channel_name: str) -> str:
        """Cr√©e une nouvelle t√¢che"""
        task_id = str(uuid.uuid4())
        
        # Essayer de r√©cup√©rer le thumbnail de la cha√Æne
        channel_thumbnail = None
        try:
            from .youtube_api_client import create_youtube_client
            youtube = create_youtube_client()
            channel_info = youtube.get_channel_info(channel_url)
            channel_thumbnail = channel_info.get('thumbnail', '')
            # Utiliser le nom officiel de la cha√Æne si disponible
            if channel_info.get('title'):
                channel_name = channel_info['title']
        except Exception as e:
            print(f"[TASKS] Impossible de r√©cup√©rer les infos cha√Æne: {e}")
        
        task = BackgroundTask(
            id=task_id,
            channel_url=channel_url,
            channel_name=channel_name,
            status='running',
            progress=0,
            current_step='Initialisation...',
            videos_found=0,
            videos_processed=0,
            total_estimated=0,
            start_time=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            channel_thumbnail=channel_thumbnail
        )
        self.tasks[task_id] = task
        self.save_tasks()
        return task_id
    
    def update_task(self, task_id: str, **kwargs):
        """Met √† jour une t√¢che"""
        if task_id in self.tasks:
            for key, value in kwargs.items():
                if hasattr(self.tasks[task_id], key):
                    setattr(self.tasks[task_id], key, value)
            self.save_tasks()
    
    def complete_task(self, task_id: str, videos_processed: int):
        """Marque une t√¢che comme termin√©e"""
        self.update_task(
            task_id,
            status='completed',
            progress=100,
            current_step='Termin√©',
            videos_processed=videos_processed,
            end_time=datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
        if task_id in self.running_tasks:
            del self.running_tasks[task_id]
    
    def error_task(self, task_id: str, error_message: str):
        """Marque une t√¢che comme √©chou√©e"""
        self.update_task(
            task_id,
            status='error',
            current_step='Erreur',
            error_message=error_message,
            end_time=datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
        if task_id in self.running_tasks:
            del self.running_tasks[task_id]
    
    def get_task(self, task_id: str) -> Optional[BackgroundTask]:
        """R√©cup√®re une t√¢che par son ID"""
        return self.tasks.get(task_id)
    
    def get_all_tasks(self) -> List[BackgroundTask]:
        """R√©cup√®re toutes les t√¢ches"""
        return list(self.tasks.values())
    
    def get_running_tasks(self) -> List[BackgroundTask]:
        """R√©cup√®re les t√¢ches en cours"""
        return [task for task in self.tasks.values() if task.status == 'running']
    
    def cancel_task(self, task_id: str):
        """Annule une t√¢che en for√ßant l'arr√™t"""
        # D√©clencher le flag d'arr√™t
        self.stop_flags[task_id] = True
        
        # Marquer comme annul√©e
        self.update_task(task_id, status='paused', current_step='Arr√™t en cours...')
        
        # Nettoyer apr√®s 3 secondes
        def cleanup():
            time.sleep(3)
            if task_id in self.running_tasks:
                del self.running_tasks[task_id]
            if task_id in self.stop_flags:
                del self.stop_flags[task_id]
        
        threading.Thread(target=cleanup, daemon=True).start()
        print(f"[TASKS] Arr√™t forc√© demand√© pour la t√¢che {task_id}")
    
    def resume_task(self, task_id: str):
        """Reprend une t√¢che interrompue depuis son √©tat sauvegard√©"""
        task = self.get_task(task_id)
        if not task:
            raise ValueError(f"T√¢che {task_id} non trouv√©e")
        
        if task.status == 'running':
            raise ValueError("T√¢che d√©j√† en cours")
        
        # Permettre la reprise de plusieurs statuts
        allowed_statuses = ['paused', 'error', 'stopped', 'completed', 'failed']
        if task.status not in allowed_statuses:
            raise ValueError(f"Impossible de reprendre une t√¢che avec le statut '{task.status}'")
        
        print(f"[TASKS] Reprise de la t√¢che {task_id} depuis le statut '{task.status}'")
        
        # Marquer comme en cours et reprendre
        self.update_task(
            task_id,
            status='running',
            current_step='Reprise de la t√¢che...',
            end_time=None  # R√©initialiser l'heure de fin
        )
        
        # Relancer le scraping
        self.start_background_scraping(task_id, task.channel_url)
        print(f"[TASKS] T√¢che {task_id} relanc√©e avec succ√®s")
    
    def delete_task(self, task_id: str):
        """Supprime d√©finitivement une t√¢che et ses donn√©es associ√©es"""
        task = self.get_task(task_id)
        if not task:
            raise ValueError(f"T√¢che {task_id} non trouv√©e")
        
        # Arr√™ter la t√¢che si elle est en cours
        if task_id in self.running_tasks:
            self.cancel_task(task_id)
        
        # Supprimer les donn√©es du cache si elles existent
        try:
            from .cache_utils import load_cache, save_cache, get_channel_key
            cache_data = load_cache()
            channel_key = get_channel_key(task.channel_url)
            
            if channel_key in cache_data:
                del cache_data[channel_key]
                save_cache(cache_data)
                print(f"[TASKS] Donn√©es de cache supprim√©es pour {channel_key}")
        except Exception as e:
            print(f"[TASKS] Erreur lors de la suppression du cache: {e}")
        
        # Supprimer la t√¢che
        del self.tasks[task_id]
        self.save_tasks()
        print(f"[TASKS] T√¢che {task_id} supprim√©e d√©finitivement")
    
    def clean_duplicate_tasks(self):
        """Nettoie les t√¢ches en double en gardant celle avec le plus de vid√©os"""
        print("[TASKS] üßπ D√©but du nettoyage des doublons...")
        
        # Grouper les t√¢ches par nom de cha√Æne ET par channel_id si disponible
        channel_groups = {}
        for task_id, task in self.tasks.items():
            # Utiliser le nom de cha√Æne comme cl√© principale
            channel_name = task.channel_name.lower().strip() if task.channel_name else "unknown"
            
            # Nettoyer le nom (enlever espaces multiples, caract√®res sp√©ciaux)
            import re
            channel_name_clean = re.sub(r'[^\w\s]', '', channel_name).strip()
            channel_name_clean = re.sub(r'\s+', ' ', channel_name_clean)
            
            # Si le nom est trop g√©n√©rique, utiliser l'URL
            if channel_name_clean in ['unknown', 'canal sans nom', 'cha√Æne inconnue', '']:
                group_key = task.channel_url
            else:
                group_key = channel_name_clean
            
            if group_key not in channel_groups:
                channel_groups[group_key] = []
            channel_groups[group_key].append((task_id, task))
        
        tasks_to_delete = []
        duplicates_found = 0
        
        # Pour chaque groupe de cha√Ænes
        for group_key, tasks_list in channel_groups.items():
            if len(tasks_list) > 1:
                duplicates_found += 1
                print(f"[TASKS] üîç Trouv√© {len(tasks_list)} doublons pour '{group_key}':")
                
                # Afficher tous les doublons trouv√©s
                for task_id, task in tasks_list:
                    print(f"    - {task.channel_name} ({task.videos_found} vid√©os, {task.start_time})")
                
                # Trier par nombre de vid√©os (d√©croissant) puis par date (plus r√©cent en premier)
                tasks_list.sort(key=lambda x: (
                    -x[1].videos_found,  # Plus de vid√©os en premier (n√©gatif pour desc)
                    -int(x[1].start_time.replace('-', '').replace(' ', '').replace(':', ''))  # Plus r√©cent en premier
                ))
                
                # Garder le premier (celui avec le plus de vid√©os et le plus r√©cent)
                best_task_id, best_task = tasks_list[0]
                print(f"[TASKS] ‚úÖ Garde: {best_task.channel_name} ({best_task.videos_found} vid√©os, {best_task.start_time}) - URL: {best_task.channel_url}")
                
                # Marquer les autres pour suppression
                for task_id, task in tasks_list[1:]:
                    tasks_to_delete.append(task_id)
                    print(f"[TASKS] ‚ùå Supprime: {task.channel_name} ({task.videos_found} vid√©os, {task.start_time}) - URL: {task.channel_url}")
        
        # Supprimer les doublons
        deleted_count = 0
        for task_id in tasks_to_delete:
            try:
                # Supprimer sans toucher au cache (pour pr√©server les donn√©es)
                del self.tasks[task_id]
                deleted_count += 1
            except KeyError:
                print(f"[TASKS] ‚ö†Ô∏è T√¢che {task_id} d√©j√† supprim√©e")
        
        # Sauvegarder les modifications
        if deleted_count > 0:
            self.save_tasks()
            print(f"[TASKS] üéâ Nettoyage termin√©: {deleted_count} doublons supprim√©s sur {duplicates_found} groupes")
        else:
            print("[TASKS] ‚ú® Aucun doublon trouv√©")
        
        return deleted_count
    
    def start_background_scraping(self, task_id: str, channel_url: str, **kwargs):
        """Lance le scraping en arri√®re-plan pour une t√¢che
        
        Args:
            task_id: ID de la t√¢che
            channel_url: URL de la cha√Æne YouTube
            **kwargs: Param√®tres suppl√©mentaires (max_videos, etc.)
        """
        # üöÄ ACCEPTER les param√®tres pour import complet
        max_videos = kwargs.get('max_videos', 1000)
        print(f"[TASKS] üìä Param√®tres re√ßus: max_videos={max_videos}")
            
        if task_id in self.running_tasks:
            return  # D√©j√† en cours
        
        # R√©initialiser le flag d'arr√™t
        self.stop_flags[task_id] = False
        
        thread = threading.Thread(
            target=self._background_scraping_worker,
            args=(task_id, channel_url, max_videos),
            daemon=True
        )
        self.running_tasks[task_id] = thread
        thread.start()
    
    def _background_scraping_worker(self, task_id: str, channel_url: str, max_videos: int = 1000):
        """Worker pour le scraping en arri√®re-plan avec API YouTube"""
        try:
            from .youtube_adapter import get_channel_videos_data_api
            from .cache_utils import load_cache, get_channel_key, save_cache
            
            # Log du changement vers l'API
            print(f"[TASKS] üöÄ Utilisation de l'API YouTube pour la t√¢che {task_id}")
            self.update_task(task_id, current_step='üöÄ D√©marrage API YouTube...', progress=1)
            
            print(f"[TASKS] üì¶ Import des modules termin√© pour {task_id}")
            self.update_task(task_id, current_step='üì¶ Modules charg√©s...', progress=3)
            
            # Charger les donn√©es existantes
            print(f"[TASKS] üíæ Chargement du cache pour {task_id}")
            self.update_task(task_id, current_step='üíæ Chargement du cache...', progress=5)
            
            cache_data = load_cache()
            print(f"[TASKS] üîë G√©n√©ration cl√© channel pour {task_id}: {channel_url}")
            channel_key = get_channel_key(channel_url)
            existing_videos = []
            
            if channel_key in cache_data:
                existing_videos = cache_data[channel_key].get('videos', [])
                print(f"[TASKS] üìπ Vid√©os existantes trouv√©es: {len(existing_videos)}")
            else:
                print(f"[TASKS] üÜï Nouveau channel, aucune vid√©o en cache")
            
            self.update_task(
                task_id, 
                current_step='üîç Pr√©paration API YouTube...', 
                progress=10,
                videos_found=len(existing_videos)
            )
            
            # V√©rifier la cl√© API avant de continuer
            import os
            api_key = os.getenv('YOUTUBE_API_KEY')
            if not api_key:
                raise ValueError("‚ùå Cl√© API YouTube non configur√©e (YOUTUBE_API_KEY)")
            
            print(f"[TASKS] üîë Cl√© API trouv√©e: {api_key[:10]}...")
            print(f"[TASKS] üéØ Lancement de l'API pour {channel_url}")
            self.update_task(task_id, current_step='üéØ Connexion API YouTube...', progress=15)
            
            # Lancer le scraping avec callback de progression
            def progress_callback(step: str, progress: int, videos_found: int, videos_processed: int):
                # V√©rifier le flag d'arr√™t
                if self.stop_flags.get(task_id, False):
                    self.update_task(task_id, status='paused', current_step='Arr√™t√© par l\'utilisateur')
                    raise InterruptedError("T√¢che arr√™t√©e par l'utilisateur")
                
                self.update_task(
                    task_id,
                    current_step=step,
                    progress=progress,
                    videos_found=videos_found,
                    videos_processed=videos_processed
                )
            
            # Scraping complet en mode background avec API YouTube
            print(f"[TASKS] ‚ö° Appel get_channel_videos_data_api pour {task_id}")
            self.update_task(task_id, current_step='‚ö° R√©cup√©ration vid√©os via API...', progress=20)
            
            try:
                # üöÄ UTILISER la limite re√ßue (0 = illimit√©)
                video_limit = max_videos if max_videos > 0 else 10000  # 0 = illimit√© = 10000 max pour s√©curit√©
                print(f"[TASKS] üéØ Limite vid√©os: {video_limit} (max_videos={max_videos})")
                
                all_videos = get_channel_videos_data_api(
                    channel_url, 
                    video_limit=video_limit
                )
                print(f"[TASKS] ‚úÖ API termin√©e, {len(all_videos) if all_videos else 0} vid√©os r√©cup√©r√©es")
                self.update_task(task_id, current_step='‚úÖ Vid√©os r√©cup√©r√©es...', progress=60)
            except Exception as api_error:
                print(f"[TASKS] ‚ùå Erreur API: {api_error}")
                self.update_task(task_id, current_step=f'‚ùå Erreur API: {str(api_error)[:50]}...', progress=20)
                raise api_error
            
            # Mettre √† jour le progress apr√®s r√©cup√©ration
            if all_videos:
                videos_found = len(all_videos)
                self.update_task(task_id, 
                    current_step=f'Processing {videos_found} videos...', 
                    progress=80,
                    videos_found=videos_found,
                    videos_processed=0
                )
            
            # Sauvegarder les r√©sultats (m√™me si c'est partiel)
            self.update_task(task_id, current_step='Sauvegarde...', progress=95)
            
            print(f"[TASKS] üíæ Sauvegarde de {len(all_videos)} vid√©os pour {channel_url}")
            
            # Mise √† jour du cache avec toutes les vid√©os
            from .cache_utils import save_competitor_data
            try:
                competitor_id = save_competitor_data(channel_url, all_videos)
                print(f"[TASKS] ‚úÖ Sauvegarde r√©ussie pour {channel_url}")
                
                # üöÄ WORKFLOW AUTOMATIQUE COMPLET POST-IMPORT
                if competitor_id:
                    print(f"[TASKS] üöÄ Lancement du workflow automatique pour competitor_id: {competitor_id}")
                    try:
                        from .import_workflow import workflow_manager
                        
                        self.update_task(task_id, current_step='üöÄ Workflow post-import...', progress=97)
                        
                        # Ex√©cuter le workflow complet
                        workflow_results = workflow_manager.run_post_import_workflow(
                            competitor_id, channel_url
                        )
                        
                        # Afficher les r√©sultats
                        print(f"[TASKS] ‚úÖ Workflow termin√©:")
                        for step_name, step_result in workflow_results['steps'].items():
                            status = step_result.get('status', 'unknown')
                            print(f"[TASKS]    - {step_name}: {status}")
                        
                    except Exception as workflow_error:
                        print(f"[TASKS] ‚ö†Ô∏è Erreur workflow (non critique): {workflow_error}")
                        import traceback
                        traceback.print_exc()
                    
            except Exception as save_error:
                print(f"[TASKS] ‚ùå Erreur de sauvegarde: {save_error}")
                import traceback
                traceback.print_exc()
            
            # Marquer comme termin√©
            self.complete_task(task_id, len(all_videos))
            
            print(f"[TASKS] T√¢che {task_id} termin√©e avec succ√®s: {len(all_videos)} vid√©os")
            
        except InterruptedError as e:
            # T√¢che arr√™t√©e volontairement
            self.update_task(task_id, status='paused', current_step='Arr√™t√© par l\'utilisateur')
            print(f"[TASKS] T√¢che {task_id} arr√™t√©e par l'utilisateur")
        except Exception as e:
            error_msg = str(e)
            print(f"[TASKS] ‚ùå Erreur dans la t√¢che {task_id}: {error_msg}")
            import traceback
            traceback.print_exc()
            
            # Message d'erreur plus informatif selon le type
            if "YOUTUBE_API_KEY" in error_msg:
                user_error = "‚ùå Cl√© API YouTube manquante - Contactez l'admin"
            elif "quota" in error_msg.lower():
                user_error = "‚ö†Ô∏è Quota API d√©pass√© - R√©essayez demain"
            elif "forbidden" in error_msg.lower() or "403" in error_msg:
                user_error = "üö´ Acc√®s refus√© par YouTube"
            elif "not found" in error_msg.lower() or "404" in error_msg:
                user_error = "‚ùì Cha√Æne YouTube introuvable"
            else:
                user_error = f"‚ùå Erreur: {error_msg[:100]}..."
            
            self.error_task(task_id, user_error)
        finally:
            # Nettoyer les r√©f√©rences
            if task_id in self.running_tasks:
                del self.running_tasks[task_id]
            if task_id in self.stop_flags:
                del self.stop_flags[task_id]

    def check_orphaned_tasks(self):
        """V√©rifie les t√¢ches dont les concurrents n'existent plus en base de donn√©es"""
        try:
            from .database import get_all_competitors_urls
            
            # R√©cup√©rer toutes les URLs des concurrents en base
            db_urls = set(get_all_competitors_urls())
            
            orphaned_tasks = []
            for task_id, task in self.tasks.items():
                # V√©rifier si l'URL de la t√¢che existe en base
                if task.channel_url not in db_urls:
                    orphaned_tasks.append(task)
            
            return orphaned_tasks
            
        except Exception as e:
            print(f"[TASKS] Erreur lors de la v√©rification des t√¢ches orphelines: {e}")
            return []
    
    def get_all_tasks_with_warnings(self):
        """R√©cup√®re toutes les t√¢ches avec des avertissements pour les concurrents manquants"""
        tasks = self.get_all_tasks()
        orphaned_tasks = self.check_orphaned_tasks()
        orphaned_ids = {task.id for task in orphaned_tasks}
        
        # Pour chaque t√¢che orpheline, essayer d'ajouter le concurrent automatiquement
        for task in tasks:
            if task.id in orphaned_ids:
                # V√©rifier d'abord si le concurrent existe maintenant
                try:
                    from .database import get_db_connection
                    conn = get_db_connection()
                    cursor = conn.cursor()
                    
                    cursor.execute("SELECT COUNT(*) FROM concurrent WHERE channel_url = ?", (task.channel_url,))
                    exists = cursor.fetchone()[0] > 0
                    conn.close()
                    
                    if exists:
                        # Le concurrent existe maintenant, plus besoin d'afficher l'avertissement
                        task.warning = None
                        continue
                        
                except Exception as e:
                    print(f"[TASKS] Erreur lors de la v√©rification du concurrent: {e}")
                
                # Essayer d'ajouter le concurrent automatiquement seulement s'il n'existe pas
                try:
                    from .database import add_competitor
                    
                    # Extraire le nom depuis l'URL ou utiliser le nom de la t√¢che
                    channel_name = task.channel_name or task.channel_url.split('/')[-1]
                    
                    # Ne pas traiter automatiquement certains concurrents connus
                    known_competitors = ['hilton', 'marriott', 'hyatt', 'tui deutschland']
                    if any(known in channel_name.lower() for known in known_competitors):
                        # Ne pas afficher de warning pour les concurrents connus qui sont d√©j√† analys√©s
                        task.warning = None
                        continue
                    
                    # D√©terminer le pays en fonction du nom
                    country = 'International'  # Par d√©faut
                    if any(word in channel_name.upper() for word in ['ARD', 'REISEN', 'DEUTSCHLAND', 'GERMAN']):
                        country = 'Germany'
                    elif any(word in channel_name.upper() for word in ['HILTON', 'MARRIOTT', 'HYATT']):
                        country = 'International'
                    
                    # Ajouter le concurrent
                    competitor_data = {
                        'name': channel_name,
                        'channel_url': task.channel_url,
                        'country': country
                    }
                    result = add_competitor(competitor_data)
                    if result:
                        print(f"[TASKS] ‚úÖ Concurrent '{channel_name}' ajout√© automatiquement en base de donn√©es")
                        
                        # Lancer automatiquement l'analyse compl√®te
                        try:
                            from .scraper import scrape_and_classify_channel
                            from .semantic_classifier import AdvancedSemanticClassifier
                            
                            print(f"[TASKS] üîÑ Lancement de l'analyse compl√®te pour '{channel_name}'...")
                            
                            # R√©cup√©rer les playlists et vid√©os
                            playlists_data = scrape_and_classify_channel(task.channel_url)
                            
                            # Classifier avec l'IA
                            classifier = AdvancedSemanticClassifier()
                            classifier.classify_all_unclassified()
                            
                            # Calculer les statistiques du concurrent
                            from .database import get_db_connection
                            conn = get_db_connection()
                            cursor = conn.cursor()
                            
                            # Obtenir l'ID du concurrent ajout√©
                            cursor.execute("SELECT id FROM concurrent WHERE channel_url = ?", (task.channel_url,))
                            competitor_id = cursor.fetchone()[0]
                            
                            # Calculer et ins√©rer les statistiques
                            from scripts.update_competitor_stats import update_competitor_stats
                            update_competitor_stats(competitor_id)
                            
                            conn.close()
                            
                            print(f"[TASKS] ‚úÖ Analyse compl√®te termin√©e pour '{channel_name}'")
                            task.warning = f"‚úÖ Concurrent ajout√© et analys√© ({country})"
                            
                        except Exception as e:
                            print(f"[TASKS] ‚ö†Ô∏è Concurrent ajout√© mais erreur lors de l'analyse: {e}")
                            task.warning = f"‚úÖ Concurrent ajout√© ({country}) - Analyse manuelle requise"
                    else:
                        task.warning = None  # Ne plus afficher le message d'erreur pour √©viter la pollution
                except Exception as e:
                    print(f"[TASKS] ‚ùå Erreur lors de l'ajout automatique du concurrent: {e}")
                    task.warning = None  # Ne plus afficher le message d'erreur pour √©viter la pollution
            else:
                task.warning = None
        
        return tasks

# Instance globale du gestionnaire
task_manager = BackgroundTaskManager() 