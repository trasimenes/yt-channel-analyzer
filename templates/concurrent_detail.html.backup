{% extends "base.html" %}

{% block title %}Dashboard {{ competitor.name or 'Concurrent' }} - YT Analyzer{% endblock %}

{% block extra_css %}
<style>
    .metric-card {
        border-radius: 15px;
        transition: transform 0.2s;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }
    .metric-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.15);
    }
    .performance-matrix {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 15px;
    }
    .category-badge {
        font-size: 0.8rem;
        padding: 0.3rem 0.6rem;
        border-radius: 20px;
    }
    .hero-badge { background: #ff6b6b; color: white; }
    .hub-badge { background: #4ecdc4; color: white; }
    .help-badge { background: #45b7d1; color: white; }
    .paid-badge { background: #f39c12; color: white; }
    .organic-badge { background: #27ae60; color: white; }
    
    /* Styles spécifiques aux playlists */
    .playlist-section {
        border-radius: 15px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }
    .playlist-card {
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        transition: all 0.3s ease;
    }
    .playlist-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
    }
    .section-separator {
        height: 4px;
        background: linear-gradient(45deg, #667eea, #764ba2);
        border-radius: 2px;
        margin: 3rem 0;
    }
</style>
{% endblock %}

{% block content %}
<div class="main-content">
<div class="container-fluid">
    <!-- Header avec titre et informations de base -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-5">
                        <i class="bi bi-youtube text-danger me-3"></i>
                        {{ competitor.name or 'Concurrent' }}
                    </h1>
                    <p class="text-muted">Analyse détaillée • {{ stats.total_videos or 0 }} vidéos</p>
                </div>
                <div class="text-end">
                    <button class="btn btn-outline-danger me-2" 
                            onclick="confirmDeleteFromDetail('{{ request.view_args.competitor_id }}', '{{ competitor.name or 'Ce concurrent' }}')"
                            title="Supprimer ce concurrent">
                        <i class="bi bi-trash me-1"></i>
                        Supprimer
                    </button>
                    <a href="/concurrents" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left me-2"></i>
                        Retour
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Métriques principales -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card metric-card bg-primary text-white">
                <div class="card-body text-center">
                    <h3>{{ stats.total_videos or 0 }}</h3>
                    <p class="mb-0">Vidéos analysées</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card metric-card bg-success text-white">
                <div class="card-body text-center">
                    <h3>{{ "{:,}".format(competitor.total_views) if competitor.total_views else "N/A" }}</h3>
                    <p class="mb-0">Vues totales</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card metric-card bg-warning text-white">
                <div class="card-body text-center">
                    <h3>{{ stats.paid_percentage or 0 }}%</h3>
                    <p class="mb-0">Contenu payé</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card metric-card bg-info text-white">
                <div class="card-body text-center">
                    <h3>{{ stats.organic_percentage or 0 }}%</h3>
                    <p class="mb-0">Contenu organique</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Section de tagging et métadonnées -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-tags me-2"></i>Tags et Classification</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="competitorSector" class="form-label">Secteur</label>
                                <select class="form-select" id="competitorSector">
                                    <option value="hospitality">Hospitalité</option>
                                    <option value="tourism">Tourisme</option>
                                    <option value="food">Restauration</option>
                                    <option value="retail">Commerce</option>
                                    <option value="service">Service</option>
                                    <option value="other">Autre</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="competitorRegion" class="form-label">Région personnalisée</label>
                                <input type="text" class="form-control" id="competitorRegion" placeholder="Ex: Benelux, Europe du Nord">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="competitorTags" class="form-label">Tags personnalisés</label>
                                <input type="text" class="form-control" id="competitorTags" placeholder="Ex: luxury, family, budget">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="competitorActive" class="form-label">Statut</label>
                                <select class="form-select" id="competitorActive">
                                    <option value="1">Actif</option>
                                    <option value="0">Inactif</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-9">
                            <div class="mb-3">
                                <label for="competitorNotes" class="form-label">Notes</label>
                                <textarea class="form-control" id="competitorNotes" rows="2" placeholder="Notes libres sur ce concurrent..."></textarea>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label">&nbsp;</label>
                                <div class="d-grid">
                                    <button type="button" class="btn btn-primary" onclick="saveCompetitorTags()">
                                        <i class="bi bi-save me-2"></i>
                                        Sauvegarder
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Zone de résultat -->
                    <div id="taggingResult" class="mt-3" style="display: none;">
                        <div class="alert alert-info">
                            <div id="taggingMessage"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Section d'upload CSV -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-file-earmark-spreadsheet me-2"></i>Importer les données d'abonnés (CSV)</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <form id="csvUploadForm" enctype="multipart/form-data">
                                <div class="mb-3">
                                    <label for="csvFile" class="form-label">Fichier CSV avec les statistiques d'abonnés</label>
                                    <input type="file" class="form-control" id="csvFile" name="csvFile" accept=".csv" required>
                                    <div class="form-text">
                                        <i class="bi bi-info-circle me-1"></i>
                                        Format attendu : colonnes "Context" et "Text" avec les dates et nombres d'abonnés
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-upload me-2"></i>
                                    Importer les données
                                </button>
                            </form>
                        </div>
                        <div class="col-md-4">
                            <div class="bg-light p-3 rounded">
                                <h6><i class="bi bi-info-circle me-2"></i>Format CSV</h6>
                                <small class="text-muted">
                                    Le fichier doit contenir :
                                    <ul class="mt-2 mb-0">
                                        <li>Colonne "Context" (peut être vide)</li>
                                        <li>Colonne "Text" avec les dates et nombres d'abonnés</li>
                                        <li>Format : "Date\nSubscribers\n1,234"</li>
                                    </ul>
                                </small>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Zone de résultat -->
                    <div id="csvUploadResult" class="mt-3" style="display: none;">
                        <div class="alert alert-info">
                            <div id="csvUploadMessage"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- ======= MODULE PLAYLISTS (SECTION DÉDIÉE) ======= -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card playlist-section">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h4 class="mb-0">
                            <i class="bi bi-collection-play me-2"></i>
                            Playlists de {{ competitor.name }}
                            <span class="badge bg-light text-dark ms-2">{{ playlists|length if playlists else 0 }}</span>
                        </h4>
                        <div>
                            <a href="/competitor/{{ request.view_args.competitor_id }}/playlists/classify" class="btn btn-primary btn-sm me-2">
                                <i class="bi bi-lightning me-1"></i>
                                Classification Avancée
                            </a>
                            <button class="btn btn-light btn-sm me-2" onclick="refreshPlaylists()">
                                <i class="bi bi-arrow-repeat me-1"></i>
                                Actualiser
                            </button>
                            <button class="btn btn-warning btn-sm" onclick="aiClassifyPlaylists()">
                                <i class="bi bi-robot me-1"></i>
                                IA Auto-Classify
                            </button>
                        </div>
                    </div>
                    {% if last_playlist_classification %}
                    <div class="mb-3 text-end">
                        <small class="text-light">Dernière classification IA : {{ last_playlist_classification }}</small>
                    </div>
                    {% endif %}
                    {% if playlists %}
                    <ul class="nav nav-tabs mb-3" id="playlistTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" type="button" role="tab">Toutes</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="hero-tab" data-bs-toggle="tab" data-bs-target="#hero" type="button" role="tab">🔥 HERO</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="hub-tab" data-bs-toggle="tab" data-bs-target="#hub" type="button" role="tab">🏠 HUB</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="help-tab" data-bs-toggle="tab" data-bs-target="#help" type="button" role="tab">🆘 HELP</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="uncat-tab" data-bs-toggle="tab" data-bs-target="#uncat" type="button" role="tab">Non catégorisé</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="playlistTabsContent">
                        <div class="tab-pane fade show active" id="all" role="tabpanel">
                            <div class="row">
                                {% for playlist in playlists %}
                                    {% include 'components/playlist_card.html' %}
                                {% endfor %}
                            </div>
                        </div>
                        <div class="tab-pane fade" id="hero" role="tabpanel">
                            <div class="row">
                                {% for playlist in playlists if playlist.category == 'hero' %}
                                    {% include 'components/playlist_card.html' %}
                                {% endfor %}
                            </div>
                        </div>
                        <div class="tab-pane fade" id="hub" role="tabpanel">
                            <div class="row">
                                {% for playlist in playlists if playlist.category == 'hub' %}
                                    {% include 'components/playlist_card.html' %}
                                {% endfor %}
                            </div>
                        </div>
                        <div class="tab-pane fade" id="help" role="tabpanel">
                            <div class="row">
                                {% for playlist in playlists if playlist.category == 'help' %}
                                    {% include 'components/playlist_card.html' %}
                                {% endfor %}
                            </div>
                        </div>
                        <div class="tab-pane fade" id="uncat" role="tabpanel">
                            <div class="row">
                                {% for playlist in playlists if not playlist.category %}
                                    {% include 'components/playlist_card.html' %}
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                    {% else %}
                    <div class="text-center py-5">
                        <i class="bi bi-collection-play text-white" style="font-size: 3rem; opacity: 0.7;"></i>
                        <h5 class="text-white mt-3">Aucune playlist trouvée</h5>
                        <p class="text-white-50">
                            Cliquez sur "Actualiser" pour récupérer les playlists de cette chaîne.
                        </p>
                        <button class="btn btn-light" onclick="refreshPlaylists()">
                            <i class="bi bi-arrow-repeat me-2"></i>
                            Récupérer les playlists
                        </button>
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <!-- Séparateur visuel -->
    <div class="section-separator"></div>

    <!-- ======= SECTION YOUTUBE SHORTS ======= -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card" style="background: linear-gradient(135deg, #FF6B6B 0%, #FF8E8E 100%); color: white;">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h4 class="mb-0">
                            <i class="bi bi-play-circle me-2"></i>
                            Analyse des YouTube Shorts
                            <span class="badge bg-light text-dark ms-2" id="shortsCount">...</span>
                        </h4>
                        <button class="btn btn-light btn-sm" onclick="loadShortsAnalysis()">
                            <i class="bi bi-arrow-repeat me-1"></i>
                            Actualiser
                        </button>
                    </div>
                    
                    <!-- Métriques Shorts vs Vidéos classiques -->
                    <div class="row mb-4" id="shortsMetrics">
                        <div class="col-md-3">
                            <div class="bg-light text-dark p-3 rounded">
                                <h5 id="shortsRatio">--%</h5>
                                <small>Ratio de Shorts</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="bg-light text-dark p-3 rounded">
                                <h5 id="shortsAvgViews">--</h5>
                                <small>Vues moy. Shorts</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="bg-light text-dark p-3 rounded">
                                <h5 id="regularAvgViews">--</h5>
                                <small>Vues moy. Vidéos</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="bg-light text-dark p-3 rounded">
                                <h5 id="shortsPerformance">--</h5>
                                <small>Performance relative</small>
                            </div>
                        </div>
                    </div>

                    <!-- Fréquence de publication -->
                    <div class="row mb-4" id="shortsFrequency">
                        <div class="col-md-4">
                            <div class="bg-light text-dark p-3 rounded">
                                <h5 id="shortsPerWeek">--</h5>
                                <small>Shorts par semaine</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="bg-light text-dark p-3 rounded">
                                <h5 id="shortsPerMonth">--</h5>
                                <small>Shorts par mois</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="bg-light text-dark p-3 rounded">
                                <h5 id="shortsPercentage">--%</h5>
                                <small>% du contenu total</small>
                            </div>
                        </div>
                    </div>

                    <!-- Recommandations -->
                    <div class="row" id="shortsRecommendations">
                        <div class="col-12">
                            <div class="bg-light text-dark p-3 rounded">
                                <h6><i class="bi bi-lightbulb me-2"></i>Recommandations</h6>
                                <ul id="recommendationsList" class="mb-0">
                                    <li>Chargement des recommandations...</li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <!-- Loading state -->
                    <div id="shortsLoading" class="text-center py-4">
                        <div class="spinner-border text-light" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                        <p class="mt-2">Analyse des Shorts en cours...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Séparateur visuel -->
    <div class="section-separator"></div>

    <!-- Matrice de performance (style Airbnb) -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card performance-matrix">
                <div class="card-body">
                    <h4 class="text-center mb-4">
                        <i class="bi bi-grid-3x3-gap me-2"></i>
                        Matrice de Performance : HUB • HERO • HELP vs Organic • Paid
                    </h4>
                    
                    <div class="row text-center">
                        <div class="col-md-2 mb-3">
                            <h6>Seuil configuré</h6>
                            <p class="mb-0">{{ stats.paid_threshold or 10000 }}+ vues = Paid</p>
                        </div>
                        <div class="col-md-2 mb-3">
                            <h6 class="text-warning">🔥 HERO</h6>
                        </div>
                        <div class="col-md-2 mb-3">
                            <h6 class="text-info">🏠 HUB</h6>
                        </div>
                        <div class="col-md-2 mb-3">
                            <h6 class="text-primary">🆘 HELP</h6>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Ligne Organic -->
                        <div class="col-md-2 d-flex align-items-center justify-content-center">
                            <div class="text-center">
                                <h6 class="text-success">🌱 Organic</h6>
                                <small>(≤{{ stats.paid_threshold or 10000 }} vues)</small>
                            </div>
                        </div>
                        
                        {% for category in ['hero', 'hub', 'help'] %}
                        <div class="col-md-2 mb-3">
                            <div class="bg-light text-dark p-3 rounded">
                                <h5>{{ (stats.performance_matrix[category].organic_median / 1000)|round(1) }}k vues</h5>
                                <small>({{ stats.performance_matrix[category].organic_count }} vidéos)</small>
                            </div>
                        </div>
                        {% endfor %}
                    </div>

                    <div class="row">
                        <!-- Ligne Paid -->
                        <div class="col-md-2 d-flex align-items-center justify-content-center">
                            <div class="text-center">
                                <h6 class="text-warning">💰 Paid</h6>
                                <small>(>{{ stats.paid_threshold or 10000 }} vues)</small>
                            </div>
                        </div>
                        
                        {% for category in ['hero', 'hub', 'help'] %}
                        <div class="col-md-2 mb-3">
                            <div class="bg-light text-dark p-3 rounded">
                                <h5>{{ (stats.performance_matrix[category].paid_median / 1000)|round(1) }}k vues</h5>
                                <small>({{ stats.performance_matrix[category].paid_count }} vidéos)</small>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Graphiques -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-pie-chart me-2"></i>Distribution HUB • HERO • HELP</h5>
                </div>
                <div class="card-body" style="height: 300px;">
                    <canvas id="categoryChart" width="400" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-bar-chart me-2"></i>Organic vs Paid</h5>
                </div>
                <div class="card-body" style="height: 300px;">
                    <canvas id="distributionChart" width="400" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Graphique d'évolution des abonnés -->
    <div class="row mb-4" id="subscriberChartSection" style="display: none;">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="bi bi-graph-up me-2"></i>Évolution des Abonnés</h5>
                    <div id="subscriberStats" class="text-end">
                        <!-- Stats seront ajoutées ici par JavaScript -->
                    </div>
                </div>
                <div class="card-body" style="height: 400px;">
                    <canvas id="subscriberChart" width="400" height="400"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- ======= ONGLETS VIDÉOS (HERO • HUB • HELP) ======= -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-play-circle me-2"></i>Analyse des Vidéos</h5>
                </div>
                <div class="card-body p-0">
                    <ul class="nav nav-tabs" id="analysisTab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="hero-tab" data-bs-toggle="tab" data-bs-target="#hero" type="button">
                                🔥 HERO ({{ stats.hero_count }})
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="hub-tab" data-bs-toggle="tab" data-bs-target="#hub" type="button">
                                🏠 HUB ({{ stats.hub_count }})
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="help-tab" data-bs-toggle="tab" data-bs-target="#help" type="button">
                                🆘 HELP ({{ stats.help_count }})
                            </button>
                        </li>
                    </ul>
                    
                    <div class="tab-content" id="analysisTabContent">
                        {% for category in ['hero', 'hub', 'help'] %}
                        <div class="tab-pane fade {% if category == 'hero' %}show active{% endif %}" id="{{ category }}">
                            <div class="p-4">
                                {% if videos_by_category[category] %}
                                <div class="table-responsive">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>Titre</th>
                                                <th>Vues</th>
                                                <th>Likes</th>
                                                <th>Type</th>
                                                <th>Score</th>
                                                <th>Tag</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% for video in videos_by_category[category][:20] %}
                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div>
                                                            {{ video.title[:60] }}{% if video.title|length > 60 %}...{% endif %}
                                                            <br>
                                                            <small class="text-muted">Confiance: {{ video.confidence }}%</small>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>{{ video.views }}</td>
                                                <td>{{ video.likes }}</td>
                                                <td>
                                                    <span class="badge {{ 'paid-badge' if video.distribution_type == 'paid' else 'organic-badge' }}">
                                                        {{ video.distribution_type|title }}
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="badge bg-secondary">{{ video.performance_score }}/10</span>
                                                </td>
                                                <td>
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                                            <i class="bi bi-tag"></i>
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            <li><a class="dropdown-item" href="#" onclick="tagVideo('{{ video.url }}', '{{ video.title }}', 'help')">🆘 HELP</a></li>
                                                            <li><a class="dropdown-item" href="#" onclick="tagVideo('{{ video.url }}', '{{ video.title }}', 'hero')">🔥 HERO</a></li>
                                                            <li><a class="dropdown-item" href="#" onclick="tagVideo('{{ video.url }}', '{{ video.title }}', 'hub')">🏠 HUB</a></li>
                                                        </ul>
                                                    </div>
                                                </td>
                                            </tr>
                                            {% endfor %}
                                        </tbody>
                                    </table>
                                </div>
                                {% else %}
                                <div class="text-center py-5">
                                    <i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
                                    <h5 class="text-muted mt-3">Aucune vidéo {{ category.upper() }}</h5>
                                </div>
                                {% endif %}
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Wait for Chart.js to load before creating charts
document.addEventListener('DOMContentLoaded', function() {
    // Graphique en camembert pour les catégories
    const ctx1 = document.getElementById('categoryChart').getContext('2d');
    new Chart(ctx1, {
        type: 'doughnut',
        data: {
            labels: ['🔥 HERO', '🏠 HUB', '🆘 HELP'],
            datasets: [{
                data: [{{ stats.hero_count or 0 }}, {{ stats.hub_count or 0 }}, {{ stats.help_count or 0 }}],
                backgroundColor: [
                    '#ff6b6b',  // Rouge pour HERO
                    '#4ecdc4',  // Turquoise pour HUB  
                    '#45b7d1'   // Bleu pour HELP
                ],
                borderWidth: 3,
                borderColor: '#ffffff',
                hoverBorderWidth: 4,
                hoverOffset: 10
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 20,
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = ((context.parsed / total) * 100).toFixed(1);
                            return `${context.label}: ${context.parsed} vidéos (${percentage}%)`;
                        }
                    }
                }
            },
            animation: {
                animateRotate: true,
                duration: 2000
            }
        }
    });

    // Graphique en barres pour Organic vs Paid
    const ctx2 = document.getElementById('distributionChart').getContext('2d');
    new Chart(ctx2, {
        type: 'bar',
        data: {
            labels: ['🌱 Organic', '💰 Paid'],
            datasets: [{
                label: 'Nombre de vidéos',
                data: [{{ stats.organic_count or 0 }}, {{ stats.paid_count or 0 }}],
                backgroundColor: [
                    'rgba(39, 174, 96, 0.8)',   // Vert pour Organic
                    'rgba(243, 156, 18, 0.8)'   // Orange pour Paid
                ],
                borderColor: [
                    'rgba(39, 174, 96, 1)',
                    'rgba(243, 156, 18, 1)'
                ],
                borderWidth: 2,
                borderRadius: 12,
                borderSkipped: false,
                hoverBackgroundColor: [
                    'rgba(39, 174, 96, 1)',
                    'rgba(243, 156, 18, 1)'
                ]
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = ((context.parsed.y / total) * 100).toFixed(1);
                            return `${context.parsed.y} vidéos (${percentage}%)`;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(0, 0, 0, 0.1)'
                    },
                    ticks: {
                        font: {
                            weight: 'bold'
                        }
                    }
                },
                x: {
                    grid: {
                        display: false
                    },
                    ticks: {
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    }
                }
            },
            animation: {
                duration: 2000,
                easing: 'easeOutBounce'
            }
        }
    });

    // Charger et afficher le graphique d'évolution des abonnés
    loadSubscriberChart();
});

// Fonction pour charger le graphique des abonnés
async function loadSubscriberChart() {
    try {
        const competitorId = window.location.pathname.split('/').pop();
        const response = await fetch(`/api/competitor/${competitorId}/subscriber-data`);
        const result = await response.json();
        
        if (result.success && result.has_data) {
            // Afficher la section du graphique
            document.getElementById('subscriberChartSection').style.display = 'block';
            
            // Afficher les statistiques
            const statsDiv = document.getElementById('subscriberStats');
            const stats = result.stats;
            statsDiv.innerHTML = `
                <small class="text-muted">
                    <strong>${stats.total_entries}</strong> points de données<br>
                    <span class="text-${stats.total_growth >= 0 ? 'success' : 'danger'}">
                        ${stats.total_growth >= 0 ? '+' : ''}${stats.total_growth.toLocaleString()} abonnés 
                        (${stats.growth_percentage >= 0 ? '+' : ''}${stats.growth_percentage}%)
                    </span><br>
                    <small>${stats.first_date} → ${stats.last_date}</small>
                </small>
            `;
            
            // Créer le graphique
            const ctx3 = document.getElementById('subscriberChart').getContext('2d');
            new Chart(ctx3, {
                type: 'line',
                data: result.chart_data,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.parsed.y.toLocaleString()} abonnés`;
                                },
                                title: function(context) {
                                    const date = new Date(context[0].label);
                                    return date.toLocaleDateString('fr-FR', { 
                                        year: 'numeric', 
                                        month: 'long' 
                                    });
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString();
                                },
                                font: {
                                    weight: 'bold'
                                }
                            },
                            title: {
                                display: true,
                                text: 'Nombre d\'abonnés',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                }
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                callback: function(value, index) {
                                    const date = new Date(this.getLabelForValue(value));
                                    return date.toLocaleDateString('fr-FR', { 
                                        month: 'short', 
                                        year: '2-digit' 
                                    });
                                },
                                font: {
                                    size: 12,
                                    weight: 'bold'
                                },
                                maxTicksLimit: 12
                            },
                            title: {
                                display: true,
                                text: 'Période',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                }
                            }
                        }
                    },
                    animation: {
                        duration: 2000,
                        easing: 'easeInOutQuart'
                    },
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    }
                }
            });
            
            console.log('📊 Graphique des abonnés chargé avec succès:', stats);
        } else {
            console.log('📊 Aucune donnée d\'abonnés disponible pour ce concurrent');
        }
    } catch (error) {
        console.error('Erreur lors du chargement du graphique des abonnés:', error);
    }
}

// Fonction de tagging des vidéos
async function tagVideo(videoUrl, videoTitle, category) {
    const competitorId = window.location.pathname.split('/').pop();
    
    try {
        const response = await fetch('/api/tag-video', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                video_url: videoUrl,
                title: videoTitle,
                category: category,
                competitor_id: competitorId
            })
        });
        
        const result = await response.json();
        if (result.success) {
            // Afficher un message de succès
            showAlert(result.message, 'success');
            // Recharger la page après 1 seconde pour voir les changements
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            showAlert('Erreur lors du tagging', 'danger');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showAlert('Erreur lors du tagging', 'danger');
    }
}

function showAlert(message, type) {
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alert.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; border-radius: 12px; box-shadow: 0 8px 25px rgba(0,0,0,0.15);';
    alert.innerHTML = `
        <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(alert);
    
    // Auto-dismiss après 3 secondes
    setTimeout(() => {
        if (alert.parentNode) {
            alert.remove();
        }
    }, 3000);
}

// Fonction de suppression depuis la page de détail
function confirmDeleteFromDetail(competitorId, competitorName) {
    if (confirm(`Êtes-vous sûr de vouloir supprimer le concurrent "${competitorName}" ?\n\nCette action est irréversible et supprimera toutes les données associées.`)) {
        deleteCompetitorFromDetail(competitorId, competitorName);
    }
}

// Fonctions pour les playlists
async function refreshPlaylists() {
    const competitorId = window.location.pathname.split('/').pop();
    
    try {
        const button = document.querySelector('button[onclick="refreshPlaylists()"]');
        const originalText = button.innerHTML;
        button.disabled = true;
        button.innerHTML = '<i class="bi bi-arrow-repeat spinner-border spinner-border-sm me-1"></i> Actualisation...';
        
        const response = await fetch(`/api/competitor/${competitorId}/playlists/refresh`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        const result = await response.json();
        if (result.success) {
            showAlert(`${result.count} playlists récupérées avec succès!`, 'success');
            // Recharger la page pour voir les nouvelles playlists
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            showAlert('Erreur lors de la récupération des playlists: ' + result.error, 'danger');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showAlert('Erreur lors de la récupération des playlists', 'danger');
    } finally {
        const button = document.querySelector('button[onclick="refreshPlaylists()"]');
        if (button) {
            button.disabled = false;
            button.innerHTML = originalText;
        }
    }
}

async function tagPlaylist(playlistId, category) {
    const competitorId = window.location.pathname.split('/').pop();
    
    try {
        const response = await fetch('/api/tag-playlist', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                playlist_id: playlistId,
                category: category,
                competitor_id: competitorId
            })
        });
        
        const result = await response.json();
        if (result.success) {
            showAlert(result.message, 'success');
            // Recharger la page pour voir les changements
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            showAlert('Erreur lors du tagging: ' + result.error, 'danger');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showAlert('Erreur lors du tagging de la playlist', 'danger');
    }
}

async function aiClassifyPlaylists() {
    const competitorId = window.location.pathname.split('/').pop();
    
    try {
        const button = document.querySelector('button[onclick="aiClassifyPlaylists()"]');
        const originalText = button.innerHTML;
        button.disabled = true;
        button.innerHTML = '<i class="bi bi-robot spinner-border spinner-border-sm me-1"></i> Classification IA...';
        
        const response = await fetch(`/api/competitor/${competitorId}/playlists/ai-classify`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        const result = await response.json();
        if (result.success) {
            if (result.classified_count > 0) {
                showAlert(`🤖 IA: ${result.classified_count} playlists classifiées automatiquement!`, 'success');
                // Recharger la page pour voir les changements
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                showAlert('✅ Toutes les playlists sont déjà catégorisées!', 'info');
            }
        } else {
            showAlert('Erreur lors de la classification IA: ' + result.error, 'danger');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showAlert('Erreur lors de la classification IA', 'danger');
    } finally {
        const button = document.querySelector('button[onclick="aiClassifyPlaylists()"]');
        if (button) {
            button.disabled = false;
            button.innerHTML = originalText;
        }
    }
}

function deleteCompetitorFromDetail(competitorId, competitorName) {
    fetch('/api/delete-competitor', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            competitor_id: competitorId
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert(`Concurrent "${competitorName}" supprimé avec succès !`, 'success');
            // Rediriger vers la page des concurrents après 1.5 secondes
            setTimeout(() => {
                window.location.href = '/concurrents';
            }, 1500);
        } else {
            showAlert(`Erreur lors de la suppression : ${data.error || 'Erreur inconnue'}`, 'danger');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showAlert('Une erreur est survenue lors de la suppression.', 'danger');
    });
}

// Gestionnaire d'upload CSV
document.addEventListener('DOMContentLoaded', function() {
    const csvUploadForm = document.getElementById('csvUploadForm');
    if (csvUploadForm) {
        csvUploadForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const fileInput = document.getElementById('csvFile');
            const file = fileInput.files[0];
            
            if (!file) {
                showAlert('Veuillez sélectionner un fichier CSV', 'warning');
                return;
            }
            
            // Récupérer l'ID du concurrent depuis l'URL
            const competitorId = window.location.pathname.split('/').pop();
            
            // Créer FormData pour l'upload
            const formData = new FormData();
            formData.append('csvFile', file);
            
            // Afficher le loading
            const submitButton = csvUploadForm.querySelector('button[type="submit"]');
            const originalText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Traitement en cours...';
            
            try {
                const response = await fetch(`/api/upload-csv/${competitorId}`, {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Afficher le résultat de l'import
                    const resultDiv = document.getElementById('csvUploadResult');
                    const messageDiv = document.getElementById('csvUploadMessage');
                    
                    messageDiv.innerHTML = `
                        <i class="bi bi-check-circle-fill text-success me-2"></i>
                        <strong>Import réussi !</strong><br>
                        ${result.message}
                    `;
                    resultDiv.className = 'mt-3 alert alert-success';
                    resultDiv.style.display = 'block';
                    
                    // Réinitialiser le formulaire
                    csvUploadForm.reset();
                    
                    showAlert(`📊 ${result.message}`, 'success');
                } else {
                    // Afficher l'erreur
                    const resultDiv = document.getElementById('csvUploadResult');
                    const messageDiv = document.getElementById('csvUploadMessage');
                    
                    messageDiv.innerHTML = `
                        <i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>
                        <strong>Erreur lors de l'import :</strong><br>
                        ${result.error}
                    `;
                    resultDiv.className = 'mt-3 alert alert-danger';
                    resultDiv.style.display = 'block';
                    
                    showAlert(`Erreur : ${result.error}`, 'danger');
                }
            } catch (error) {
                console.error('Erreur lors de l\'upload:', error);
                
                const resultDiv = document.getElementById('csvUploadResult');
                const messageDiv = document.getElementById('csvUploadMessage');
                
                messageDiv.innerHTML = `
                    <i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>
                    <strong>Erreur de connexion :</strong><br>
                    Impossible de traiter le fichier. Veuillez réessayer.
                `;
                resultDiv.className = 'mt-3 alert alert-danger';
                resultDiv.style.display = 'block';
                
                showAlert('Erreur de connexion lors de l\'upload', 'danger');
            } finally {
                // Restaurer le bouton
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            }
        });
    }
});

// ========================================
// FONCTIONS DE TAGGING
// ========================================

// Charger les tags existants au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    loadCompetitorTags();
});

async function loadCompetitorTags() {
    const competitorId = window.location.pathname.split('/').pop();
    
    try {
        const response = await fetch(`/api/competitor/${competitorId}/tags`);
        const result = await response.json();
        
        if (result.success) {
            const tags = result.tags;
            
            // Remplir les champs avec les valeurs existantes
            document.getElementById('competitorSector').value = tags.sector || 'hospitality';
            document.getElementById('competitorRegion').value = tags.custom_region || '';
            document.getElementById('competitorTags').value = tags.tags || '';
            document.getElementById('competitorNotes').value = tags.notes || '';
            document.getElementById('competitorActive').value = tags.is_active ? '1' : '0';
        }
    } catch (error) {
        console.error('Erreur lors du chargement des tags:', error);
    }
}

async function saveCompetitorTags() {
    const competitorId = window.location.pathname.split('/').pop();
    
    // Récupérer les valeurs des champs
    const tagsData = {
        sector: document.getElementById('competitorSector').value,
        custom_region: document.getElementById('competitorRegion').value,
        tags: document.getElementById('competitorTags').value,
        notes: document.getElementById('competitorNotes').value,
        is_active: parseInt(document.getElementById('competitorActive').value)
    };
    
    try {
        const button = document.querySelector('button[onclick="saveCompetitorTags()"]');
        const originalText = button.innerHTML;
        button.disabled = true;
        button.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Sauvegarde...';
        
        const response = await fetch(`/api/competitor/${competitorId}/tags`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(tagsData)
        });
        
        const result = await response.json();
        
        if (result.success) {
            const resultDiv = document.getElementById('taggingResult');
            const messageDiv = document.getElementById('taggingMessage');
            
            messageDiv.innerHTML = `
                <i class="bi bi-check-circle-fill text-success me-2"></i>
                <strong>Tags sauvegardés avec succès !</strong>
            `;
            resultDiv.className = 'mt-3 alert alert-success';
            resultDiv.style.display = 'block';
            
            showAlert('✅ Tags sauvegardés avec succès !', 'success');
            
            // Masquer le message après 3 secondes
            setTimeout(() => {
                resultDiv.style.display = 'none';
            }, 3000);
        } else {
            const resultDiv = document.getElementById('taggingResult');
            const messageDiv = document.getElementById('taggingMessage');
            
            messageDiv.innerHTML = `
                <i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>
                <strong>Erreur lors de la sauvegarde :</strong><br>
                ${result.error}
            `;
            resultDiv.className = 'mt-3 alert alert-danger';
            resultDiv.style.display = 'block';
            
            showAlert(`Erreur : ${result.error}`, 'danger');
        }
    } catch (error) {
        console.error('Erreur lors de la sauvegarde des tags:', error);
        
        const resultDiv = document.getElementById('taggingResult');
        const messageDiv = document.getElementById('taggingMessage');
        
        messageDiv.innerHTML = `
            <i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>
            <strong>Erreur de connexion :</strong><br>
            Impossible de sauvegarder les tags. Veuillez réessayer.
        `;
        resultDiv.className = 'mt-3 alert alert-danger';
        resultDiv.style.display = 'block';
        
        showAlert('Erreur de connexion lors de la sauvegarde', 'danger');
    } finally {
        // Restaurer le bouton
        const button = document.querySelector('button[onclick="saveCompetitorTags()"]');
        if (button) {
            button.disabled = false;
            button.innerHTML = originalText;
        }
    }
}

// ========================================
// FONCTIONS YOUTUBE SHORTS
// ========================================

// Charger l'analyse des Shorts au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    loadShortsAnalysis();
});

async function loadShortsAnalysis() {
    const competitorId = window.location.pathname.split('/').pop();
    
    // Afficher le loading
    document.getElementById('shortsLoading').style.display = 'block';
    document.getElementById('shortsMetrics').style.display = 'none';
    document.getElementById('shortsFrequency').style.display = 'none';
    document.getElementById('shortsRecommendations').style.display = 'none';
    
    try {
        // Récupérer le rapport complet des Shorts
        const response = await fetch(`/api/shorts/report/${competitorId}`);
        const result = await response.json();
        
        if (result.success && result.report) {
            const report = result.report;
            
            // Masquer le loading
            document.getElementById('shortsLoading').style.display = 'none';
            
            // Afficher les sections
            document.getElementById('shortsMetrics').style.display = 'block';
            document.getElementById('shortsFrequency').style.display = 'block';
            document.getElementById('shortsRecommendations').style.display = 'block';
            
            // Mettre à jour les métriques de comparaison
            const comparison = report.comparison;
            if (comparison) {
                // Mettre à jour les métriques de base
                document.getElementById('shortsCount').textContent = comparison.shorts_stats?.count || 0;
                document.getElementById('shortsRatio').textContent = comparison.shorts_ratio + '%';
                document.getElementById('shortsAvgViews').textContent = formatNumber(comparison.shorts_stats?.avg_views || 0);
                document.getElementById('regularAvgViews').textContent = formatNumber(comparison.regular_stats?.avg_views || 0);
                
                // Performance relative
                const perfComp = comparison.performance_comparison;
                if (perfComp && perfComp.views_ratio) {
                    const ratio = perfComp.views_ratio;
                    let perfText = '';
                    let perfColor = '';
                    
                    if (ratio > 1.5) {
                        perfText = `+${Math.round((ratio - 1) * 100)}%`;
                        perfColor = 'text-success';
                    } else if (ratio < 0.5) {
                        perfText = `-${Math.round((1 - ratio) * 100)}%`;
                        perfColor = 'text-danger';
                    } else {
                        perfText = `${ratio > 1 ? '+' : ''}${Math.round((ratio - 1) * 100)}%`;
                        perfColor = 'text-warning';
                    }
                    
                    document.getElementById('shortsPerformance').innerHTML = `<span class="${perfColor}">${perfText}</span>`;
                } else {
                    document.getElementById('shortsPerformance').textContent = 'N/A';
                }
            }
            
            // Mettre à jour les métriques de fréquence
            const frequency = report.frequency_patterns;
            if (frequency) {
                document.getElementById('shortsPerWeek').textContent = frequency.avg_shorts_per_week || 0;
                document.getElementById('shortsPerMonth').textContent = frequency.monthly_shorts || 0;
                document.getElementById('shortsPercentage').textContent = frequency.shorts_percentage + '%';
            }
            
            // Mettre à jour les recommandations
            const recommendations = report.recommendations;
            if (recommendations && recommendations.length > 0) {
                const recommendationsList = document.getElementById('recommendationsList');
                recommendationsList.innerHTML = recommendations.map(rec => `<li>${rec}</li>`).join('');
            } else {
                document.getElementById('recommendationsList').innerHTML = '<li>✅ Stratégie Shorts optimale détectée</li>';
            }
            
        } else {
            // Erreur dans la réponse
            document.getElementById('shortsLoading').innerHTML = `
                <div class="text-center py-4">
                    <i class="bi bi-exclamation-triangle text-warning" style="font-size: 2rem;"></i>
                    <p class="mt-2">Erreur lors du chargement des données Shorts</p>
                    <button class="btn btn-light btn-sm" onclick="loadShortsAnalysis()">
                        <i class="bi bi-arrow-repeat me-1"></i>
                        Réessayer
                    </button>
                </div>
            `;
        }
    } catch (error) {
        console.error('Erreur lors du chargement de l\'analyse Shorts:', error);
        
        document.getElementById('shortsLoading').innerHTML = `
            <div class="text-center py-4">
                <i class="bi bi-wifi-off text-danger" style="font-size: 2rem;"></i>
                <p class="mt-2">Erreur de connexion</p>
                <button class="btn btn-light btn-sm" onclick="loadShortsAnalysis()">
                    <i class="bi bi-arrow-repeat me-1"></i>
                    Réessayer
                </button>
            </div>
        `;
    }
}

// Fonction utilitaire pour formater les nombres
function formatNumber(num) {
    if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'k';
    } else {
        return num.toString();
    }
}

</script>
{% endblock %} 