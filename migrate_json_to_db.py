#!/usr/bin/env python3
"""
Script pour migrer les donn√©es des concurrents depuis le fichier JSON vers la base de donn√©es SQLite.
"""

import os
import json
import sqlite3
from datetime import datetime
# urllib.parse non n√©cessaire pour ce script

def extract_channel_id_from_url(channel_url):
    """Extraire l'ID de la cha√Æne depuis l'URL"""
    try:
        if '/channel/' in channel_url:
            return channel_url.split('/channel/')[-1].split('/')[0].split('?')[0]
        elif '/@' in channel_url:
            # Pour les URLs avec @username, on utilise l'username comme ID temporaire
            return channel_url.split('/@')[-1].split('/')[0].split('?')[0]
        elif '/c/' in channel_url:
            return channel_url.split('/c/')[-1].split('/')[0].split('?')[0]
        elif '/user/' in channel_url:
            return channel_url.split('/user/')[-1].split('/')[0].split('?')[0]
        else:
            # Fallback: utiliser l'URL compl√®te comme ID
            return channel_url.replace('/', '_').replace(':', '_').replace('?', '_')[:100]
    except:
        return f"unknown_{hash(channel_url) % 10000}"

def migrate_data():
    """Migrer les donn√©es du JSON vers la base de donn√©es"""
    
    # Chemins des fichiers
    json_file = 'cache_recherches/recherches.json'
    db_path = 'instance/database.db'
    
    # V√©rifier que les fichiers existent
    if not os.path.exists(json_file):
        print(f"‚ùå Fichier JSON non trouv√©: {json_file}")
        return False
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        print("üí° Ex√©cutez d'abord: python3 create_database.py")
        return False
    
    # Charger les donn√©es JSON
    print(f"üìñ Chargement des donn√©es depuis: {json_file}")
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du JSON: {e}")
        return False
    
    print(f"üìä {len(json_data)} concurrents trouv√©s dans le JSON")
    
    # Importer la fonction de sauvegarde
    try:
        from yt_channel_analyzer.database import save_competitor_and_videos
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    
    # Compteurs
    migrated_count = 0
    error_count = 0
    total_videos = 0
    
    # Migrer chaque concurrent
    for json_key, competitor_data in json_data.items():
        try:
            # Extraire les informations du concurrent
            name = competitor_data.get('name', 'Nom inconnu')
            channel_url = competitor_data.get('url', '')  # 'url' dans le JSON
            
            if not channel_url:
                print(f"‚ö†Ô∏è  URL manquante pour {name}, ignor√©")
                continue
            
            # Pr√©parer les infos de la cha√Æne
            channel_info = {
                'title': name,
                'thumbnail': '',
                'banner': '',
                'description': '',
                'subscriber_count': None,
                'view_count': None,
                'country': '',
                'language': ''
            }
            
            # R√©cup√©rer les vid√©os
            videos = competitor_data.get('videos', [])
            
            print(f"üìπ Migration de {name} avec {len(videos)} vid√©os...")
            
            # Sauvegarder dans la base de donn√©es
            competitor_id = save_competitor_and_videos(channel_url, videos, channel_info)
            
            print(f"‚úÖ Migr√©: {name} (ID {competitor_id}) avec {len(videos)} vid√©os")
            migrated_count += 1
            total_videos += len(videos)
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la migration de {competitor_data.get('name', 'Inconnu')}: {e}")
            error_count += 1
    
    # V√©rifier les r√©sultats
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM concurrent')
    total_competitors = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM video')
    total_videos_db = cursor.fetchone()[0]
    
    conn.close()
    
    # R√©sum√©
    print(f"\nüìã R√©sum√© de la migration:")
    print(f"   ‚úÖ Concurrents migr√©s: {migrated_count}")
    print(f"   üìπ Vid√©os migr√©es: {total_videos}")
    print(f"   ‚ùå Erreurs: {error_count}")
    print(f"   üìä Total en base - Concurrents: {total_competitors}, Vid√©os: {total_videos_db}")
    
    if migrated_count > 0:
        print(f"\nüéâ Migration termin√©e avec succ√®s!")
        
        # Proposer de sauvegarder l'ancien fichier
        backup_file = f"{json_file}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        try:
            import shutil
            shutil.copy2(json_file, backup_file)
            print(f"üíæ Sauvegarde cr√©√©e: {backup_file}")
        except:
            print("‚ö†Ô∏è  Impossible de cr√©er une sauvegarde du fichier JSON")
    
    return migrated_count > 0

def verify_migration():
    """V√©rifier que la migration s'est bien pass√©e"""
    db_path = 'instance/database.db'
    
    if not os.path.exists(db_path):
        print("‚ùå Base de donn√©es non trouv√©e")
        return
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Compter les concurrents et vid√©os
    cursor.execute('SELECT COUNT(*) FROM concurrent')
    total_concurrent = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM video')
    total_videos = cursor.fetchone()[0]
    
    # Afficher quelques exemples
    cursor.execute('''
        SELECT c.name, c.channel_url, COUNT(v.id) as video_count 
        FROM concurrent c 
        LEFT JOIN video v ON c.id = v.concurrent_id 
        GROUP BY c.id 
        LIMIT 5
    ''')
    examples = cursor.fetchall()
    
    conn.close()
    
    print(f"\nüîç V√©rification de la base de donn√©es:")
    print(f"   üìä Nombre total de concurrents: {total_concurrent}")
    print(f"   üìπ Nombre total de vid√©os: {total_videos}")
    print(f"   üìã Exemples:")
    for name, url, video_count in examples:
        print(f"      - {name}: {video_count} vid√©os ({url})")

if __name__ == '__main__':
    print("üöÄ D√©but de la migration des donn√©es JSON vers la base de donn√©es")
    print("=" * 60)
    
    if migrate_data():
        verify_migration()
    else:
        print("‚ùå Migration √©chou√©e") 